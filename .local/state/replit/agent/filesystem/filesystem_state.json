{"file_contents":{"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/pages/plots.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus, Building2, Search, ChevronDown, ChevronRight, Users, TrendingUp, Phone, Mail, User, DollarSign, X, FileText } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Project, InsertPlot, InsertProject, User as UserType, BuyerInterest } from \"@shared/schema\";\nimport { plotStatuses, plotCategories } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertPlotSchema, insertProjectSchema } from \"@shared/schema\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useAuth } from \"@/lib/auth\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface ProjectOverview extends Project {\n  totalPlots: number;\n  availablePlots: number;\n  bookedPlots: number;\n  soldPlots: number;\n  totalInterestedBuyers: number;\n  plots: PlotWithInterests[];\n}\n\ninterface PlotWithInterests {\n  _id: string;\n  projectId: string;\n  plotNumber: string;\n  size: string;\n  price: number;\n  facing?: string;\n  status: string;\n  category: string;\n  amenities?: string;\n  bookedBy?: string;\n  buyerInterestCount: number;\n  highestOffer: number;\n  salespersons: Array<{ id: string; name: string }>;\n}\n\nexport default function Plots() {\n  const [isAddProjectOpen, setIsAddProjectOpen] = useState(false);\n  const [isAddPlotOpen, setIsAddPlotOpen] = useState(false);\n  const [expandedProjects, setExpandedProjects] = useState<Set<string>>(new Set());\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [expandedPlotId, setExpandedPlotId] = useState<string | null>(null);\n  const { toast } = useToast();\n  const { isAdmin } = useAuth();\n\n  const { data: projectsOverview, isLoading } = useQuery<ProjectOverview[]>({\n    queryKey: [\"/api/projects/overview\"],\n  });\n\n  const { data: salespersons } = useQuery<UserType[]>({\n    queryKey: [\"/api/users/salespersons\"],\n  });\n\n  const { data: buyerInterests, isLoading: isLoadingInterests } = useQuery<BuyerInterest[]>({\n    queryKey: [\"/api/buyer-interests\", expandedPlotId],\n    enabled: !!expandedPlotId,\n  });\n\n  const projectForm = useForm<InsertProject>({\n    resolver: zodResolver(insertProjectSchema),\n    defaultValues: {\n      name: \"\",\n      location: \"\",\n      totalPlots: 0,\n      description: \"\",\n    },\n  });\n\n  const plotForm = useForm<InsertPlot>({\n    resolver: zodResolver(insertPlotSchema),\n    defaultValues: {\n      projectId: \"\",\n      plotNumber: \"\",\n      size: \"\",\n      price: 0,\n      facing: \"\",\n      status: \"Available\",\n      category: \"Residential Plot\",\n      amenities: \"\",\n    },\n  });\n\n\n  const createProjectMutation = useMutation({\n    mutationFn: (data: InsertProject) => apiRequest(\"POST\", \"/api/projects\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects/overview\"] });\n      toast({ title: \"Project created successfully\" });\n      setIsAddProjectOpen(false);\n      projectForm.reset();\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const createPlotMutation = useMutation({\n    mutationFn: (data: InsertPlot) => apiRequest(\"POST\", \"/api/plots\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects/overview\"] });\n      toast({ title: \"Plot created successfully\" });\n      setIsAddPlotOpen(false);\n      plotForm.reset();\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n\n  const handleProjectSubmit = (data: InsertProject) => {\n    createProjectMutation.mutate(data);\n  };\n\n  const handlePlotSubmit = (data: InsertPlot) => {\n    createPlotMutation.mutate(data);\n  };\n\n\n  const toggleProject = (projectId: string) => {\n    const newExpanded = new Set(expandedProjects);\n    if (newExpanded.has(projectId)) {\n      newExpanded.delete(projectId);\n    } else {\n      newExpanded.add(projectId);\n    }\n    setExpandedProjects(newExpanded);\n  };\n\n  const handleBuyerInterestClick = (plotId: string, event: React.MouseEvent) => {\n    event.stopPropagation();\n    if (expandedPlotId === plotId) {\n      setExpandedPlotId(null);\n    } else {\n      setExpandedPlotId(plotId);\n    }\n  };\n\n\n  const getStatusBadgeColor = (status: string) => {\n    switch (status) {\n      case \"Available\":\n        return \"bg-green-500 hover:bg-green-600 text-white\";\n      case \"Booked\":\n        return \"bg-yellow-500 hover:bg-yellow-600 text-white\";\n      case \"Hold\":\n        return \"bg-orange-500 hover:bg-orange-600 text-white\";\n      case \"Sold\":\n        return \"bg-red-500 hover:bg-red-600 text-white\";\n      default:\n        return \"bg-gray-500 hover:bg-gray-600 text-white\";\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return `₹${(amount / 100000).toFixed(2)}L`;\n  };\n\n  // Filter projects and plots\n  const filteredProjects = projectsOverview?.map(project => ({\n    ...project,\n    plots: project.plots.filter(plot => {\n      const matchesStatus = statusFilter === \"all\" || plot.status === statusFilter;\n      const matchesSearch =\n        searchQuery === \"\" ||\n        plot.plotNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        project.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        project.location.toLowerCase().includes(searchQuery.toLowerCase());\n      return matchesStatus && matchesSearch;\n    })\n  })).filter(project => project.plots.length > 0 || searchQuery === \"\");\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      {/* Header */}\n      <div className=\"flex flex-wrap items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-primary to-primary/60 bg-clip-text text-transparent\">\n            Projects & Plots Management\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Track projects, plots, and buyer interests in one place\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          {isAdmin && (\n            <>\n              <Dialog open={isAddProjectOpen} onOpenChange={setIsAddProjectOpen}>\n                <DialogTrigger asChild>\n                  <Button variant=\"outline\" className=\"shadow-sm\" data-testid=\"button-add-project\">\n                    <Building2 className=\"h-4 w-4 mr-2\" />\n                    Add Project\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Add New Project</DialogTitle>\n                    <DialogDescription>Create a new real estate project</DialogDescription>\n                  </DialogHeader>\n                  <Form {...projectForm}>\n                    <form onSubmit={projectForm.handleSubmit(handleProjectSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={projectForm.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Project Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Green Valley Plots\" {...field} data-testid=\"input-project-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={projectForm.control}\n                        name=\"location\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Location</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Bangalore, Karnataka\" {...field} data-testid=\"input-project-location\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={projectForm.control}\n                        name=\"totalPlots\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Total Plots</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                data-testid=\"input-project-total-plots\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={projectForm.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Description (Optional)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Premium plots with all amenities\" {...field} data-testid=\"input-project-description\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"flex justify-end gap-2\">\n                        <Button type=\"button\" variant=\"outline\" onClick={() => setIsAddProjectOpen(false)} data-testid=\"button-cancel-project\">\n                          Cancel\n                        </Button>\n                        <Button type=\"submit\" disabled={createProjectMutation.isPending} data-testid=\"button-submit-project\">\n                          {createProjectMutation.isPending ? \"Creating...\" : \"Create\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n              <Dialog open={isAddPlotOpen} onOpenChange={setIsAddPlotOpen}>\n                <DialogTrigger asChild>\n                  <Button className=\"shadow-sm\" data-testid=\"button-add-plot\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Plot\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle>Add New Plot</DialogTitle>\n                    <DialogDescription>Add a plot to a project</DialogDescription>\n                  </DialogHeader>\n                  <Form {...plotForm}>\n                    <form onSubmit={plotForm.handleSubmit(handlePlotSubmit)} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={plotForm.control}\n                          name=\"projectId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Project</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-plot-project\">\n                                    <SelectValue placeholder=\"Select project\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {projectsOverview?.map((project) => (\n                                    <SelectItem key={project._id} value={project._id}>\n                                      {project.name}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={plotForm.control}\n                          name=\"category\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Category</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-plot-category\">\n                                    <SelectValue placeholder=\"Select category\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {plotCategories.map((cat) => (\n                                    <SelectItem key={cat} value={cat}>\n                                      {cat}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={plotForm.control}\n                          name=\"plotNumber\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Plot Number</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"A-101\" {...field} data-testid=\"input-plot-number\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={plotForm.control}\n                          name=\"size\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Size</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"1200 sq.ft\" {...field} data-testid=\"input-plot-size\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={plotForm.control}\n                          name=\"price\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Price (₹)</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"number\"\n                                  {...field}\n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                  data-testid=\"input-plot-price\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={plotForm.control}\n                          name=\"facing\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Facing (Optional)</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"East\" {...field} data-testid=\"input-plot-facing\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <FormField\n                        control={plotForm.control}\n                        name=\"amenities\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Amenities (Optional)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Water supply, Electricity, Road access\" {...field} data-testid=\"input-plot-amenities\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={plotForm.control}\n                        name=\"status\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Status</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-plot-status\">\n                                  <SelectValue placeholder=\"Select status\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {plotStatuses.map((status) => (\n                                  <SelectItem key={status} value={status}>\n                                    {status}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"flex justify-end gap-2\">\n                        <Button type=\"button\" variant=\"outline\" onClick={() => setIsAddPlotOpen(false)} data-testid=\"button-cancel-plot\">\n                          Cancel\n                        </Button>\n                        <Button type=\"submit\" disabled={createPlotMutation.isPending} data-testid=\"button-submit-plot\">\n                          {createPlotMutation.isPending ? \"Creating...\" : \"Create\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </>\n          )}\n        </div>\n      </div>\n\n      {/* Search and Filters */}\n      <Card className=\"shadow-md\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex flex-wrap gap-4\">\n            <div className=\"flex-1 min-w-[200px]\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by project, plot ID, or location...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-[180px]\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                {plotStatuses.map((status) => (\n                  <SelectItem key={status} value={status}>\n                    {status}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {(searchQuery || statusFilter !== \"all\") && (\n              <Button\n                variant=\"ghost\"\n                onClick={() => {\n                  setSearchQuery(\"\");\n                  setStatusFilter(\"all\");\n                }}\n                className=\"text-muted-foreground\"\n                data-testid=\"button-clear-filters\"\n              >\n                <X className=\"h-4 w-4 mr-2\" />\n                Clear\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Projects Table */}\n      {isLoading ? (\n        <div className=\"flex justify-center py-12\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n        </div>\n      ) : filteredProjects && filteredProjects.length > 0 ? (\n        <Card className=\"shadow-md\">\n          <CardContent className=\"p-0\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"w-[50px]\"></TableHead>\n                  <TableHead>Project Name</TableHead>\n                  <TableHead>Location</TableHead>\n                  <TableHead className=\"text-center\">Total Plots</TableHead>\n                  <TableHead className=\"text-center\">Available</TableHead>\n                  <TableHead className=\"text-center\">Booked</TableHead>\n                  <TableHead className=\"text-center\">Sold</TableHead>\n                  <TableHead className=\"text-center\">Interested Buyers</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredProjects.map((project) => (\n                  <>\n                    <TableRow \n                      key={project._id} \n                      className=\"cursor-pointer hover:bg-muted/50\"\n                      onClick={() => toggleProject(project._id)}\n                      data-testid={`row-project-${project._id}`}\n                    >\n                      <TableCell>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"h-6 w-6 p-0\">\n                          {expandedProjects.has(project._id) ? (\n                            <ChevronDown className=\"h-4 w-4\" />\n                          ) : (\n                            <ChevronRight className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </TableCell>\n                      <TableCell className=\"font-semibold\" data-testid={`text-project-name-${project._id}`}>\n                        {project.name}\n                      </TableCell>\n                      <TableCell className=\"text-muted-foreground\">{project.location}</TableCell>\n                      <TableCell className=\"text-center\">{project.totalPlots}</TableCell>\n                      <TableCell className=\"text-center\">\n                        <Badge className=\"bg-green-500 text-white\">{project.availablePlots}</Badge>\n                      </TableCell>\n                      <TableCell className=\"text-center\">\n                        <Badge className=\"bg-yellow-500 text-white\">{project.bookedPlots}</Badge>\n                      </TableCell>\n                      <TableCell className=\"text-center\">\n                        <Badge className=\"bg-red-500 text-white\">{project.soldPlots}</Badge>\n                      </TableCell>\n                      <TableCell className=\"text-center\">\n                        <Badge variant=\"outline\" className=\"gap-1\">\n                          <Users className=\"h-3 w-3\" />\n                          {project.totalInterestedBuyers}\n                        </Badge>\n                      </TableCell>\n                    </TableRow>\n\n                    {/* Expanded Plots Table */}\n                    {expandedProjects.has(project._id) && project.plots.length > 0 && (\n                      <TableRow>\n                        <TableCell colSpan={8} className=\"p-0 bg-muted/20\">\n                          <div className=\"p-4\">\n                            <Table>\n                              <TableHeader>\n                                <TableRow className=\"bg-muted/50\">\n                                  <TableHead>Plot Number</TableHead>\n                                  <TableHead>Size</TableHead>\n                                  <TableHead>Price</TableHead>\n                                  <TableHead>Status</TableHead>\n                                  <TableHead className=\"text-center\">Buyer Interest</TableHead>\n                                  <TableHead>Highest Offer</TableHead>\n                                  <TableHead>Salespersons</TableHead>\n                                </TableRow>\n                              </TableHeader>\n                              <TableBody>\n                                {project.plots.map((plot) => (\n                                  <>\n                                    <TableRow \n                                      key={plot._id}\n                                      className=\"hover:bg-muted/30\"\n                                      data-testid={`row-plot-${plot._id}`}\n                                    >\n                                      <TableCell className=\"font-medium\" data-testid={`text-plot-number-${plot._id}`}>\n                                        {plot.plotNumber}\n                                      </TableCell>\n                                      <TableCell>{plot.size}</TableCell>\n                                      <TableCell className=\"font-semibold text-primary\">\n                                        {formatCurrency(plot.price)}\n                                      </TableCell>\n                                      <TableCell>\n                                        <Badge className={getStatusBadgeColor(plot.status)}>\n                                          {plot.status}\n                                        </Badge>\n                                      </TableCell>\n                                      <TableCell className=\"text-center\">\n                                        <Badge \n                                          variant=\"outline\" \n                                          className={`gap-1 ${plot.buyerInterestCount > 0 ? 'cursor-pointer hover:bg-primary/10 hover:border-primary transition-colors' : ''} ${expandedPlotId === plot._id ? 'bg-primary/10 border-primary' : ''}`}\n                                          onClick={plot.buyerInterestCount > 0 ? (e) => handleBuyerInterestClick(plot._id, e) : undefined}\n                                          data-testid={`badge-buyer-interest-${plot._id}`}\n                                        >\n                                          <Users className=\"h-3 w-3\" />\n                                          {plot.buyerInterestCount}\n                                        </Badge>\n                                      </TableCell>\n                                      <TableCell>\n                                        {plot.highestOffer > 0 ? (\n                                          <span className=\"font-semibold text-green-600 flex items-center gap-1\">\n                                            <TrendingUp className=\"h-3 w-3\" />\n                                            {formatCurrency(plot.highestOffer)}\n                                          </span>\n                                        ) : (\n                                          <span className=\"text-muted-foreground\">-</span>\n                                        )}\n                                      </TableCell>\n                                      <TableCell>\n                                        {plot.salespersons.length > 0 ? (\n                                          <div className=\"flex flex-wrap gap-1\">\n                                            {plot.salespersons.slice(0, 2).map((sp, idx) => (\n                                              <Badge key={idx} variant=\"secondary\" className=\"text-xs\">\n                                                {sp.name}\n                                              </Badge>\n                                            ))}\n                                            {plot.salespersons.length > 2 && (\n                                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                                +{plot.salespersons.length - 2}\n                                              </Badge>\n                                            )}\n                                          </div>\n                                        ) : (\n                                          <span className=\"text-muted-foreground\">-</span>\n                                        )}\n                                      </TableCell>\n                                    </TableRow>\n\n                                    {/* Buyer Interest Details Section */}\n                                    {expandedPlotId === plot._id && (\n                                      <TableRow>\n                                        <TableCell colSpan={7} className=\"p-0 bg-muted/10\">\n                                          <div className=\"p-4 border-t border-border\">\n                                            <div className=\"flex items-center gap-2 mb-3\">\n                                              <Users className=\"h-4 w-4 text-primary\" />\n                                              <h4 className=\"font-semibold text-sm\">Interested Buyers for Plot {plot.plotNumber}</h4>\n                                            </div>\n                                            \n                                            {isLoadingInterests ? (\n                                              <div className=\"flex justify-center py-8\">\n                                                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                                              </div>\n                                            ) : buyerInterests && buyerInterests.length > 0 ? (\n                                              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                                                {buyerInterests.map((interest, index) => (\n                                                  <Card key={interest._id} className=\"overflow-hidden border-muted\" data-testid={`card-buyer-interest-${index}`}>\n                                                    <CardContent className=\"p-3\">\n                                                      <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                                                        <div className=\"space-y-2\">\n                                                          <div>\n                                                            <p className=\"text-xs text-muted-foreground\">Buyer Name</p>\n                                                            <p className=\"font-semibold\" data-testid={`text-buyer-name-${index}`}>\n                                                              {interest.buyerName}\n                                                            </p>\n                                                          </div>\n                                                          <div>\n                                                            <p className=\"text-xs text-muted-foreground\">Contact</p>\n                                                            <p className=\"font-medium\" data-testid={`text-buyer-contact-${index}`}>\n                                                              {interest.buyerContact}\n                                                            </p>\n                                                          </div>\n                                                          {interest.buyerEmail && (\n                                                            <div>\n                                                              <p className=\"text-xs text-muted-foreground\">Email</p>\n                                                              <p className=\"font-medium text-xs break-all\" data-testid={`text-buyer-email-${index}`}>\n                                                                {interest.buyerEmail}\n                                                              </p>\n                                                            </div>\n                                                          )}\n                                                        </div>\n                                                        <div className=\"space-y-2\">\n                                                          <div>\n                                                            <p className=\"text-xs text-muted-foreground\">Offered Price</p>\n                                                            <p className=\"font-bold text-base text-green-600 dark:text-green-400\" data-testid={`text-offered-price-${index}`}>\n                                                              {formatCurrency(interest.offeredPrice)}\n                                                            </p>\n                                                          </div>\n                                                          <div>\n                                                            <p className=\"text-xs text-muted-foreground\">Salesperson</p>\n                                                            <p className=\"font-medium\" data-testid={`text-salesperson-${index}`}>\n                                                              {interest.salespersonName}\n                                                            </p>\n                                                          </div>\n                                                          {interest.notes && (\n                                                            <div>\n                                                              <p className=\"text-xs text-muted-foreground\">Notes</p>\n                                                              <p className=\"text-xs text-muted-foreground\" data-testid={`text-notes-${index}`}>\n                                                                {interest.notes}\n                                                              </p>\n                                                            </div>\n                                                          )}\n                                                        </div>\n                                                      </div>\n                                                      <Separator className=\"my-2\" />\n                                                      <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                                                        <span>\n                                                          Added: {new Date(interest.createdAt).toLocaleDateString('en-IN', { \n                                                            day: 'numeric', \n                                                            month: 'short', \n                                                            year: 'numeric' \n                                                          })}\n                                                        </span>\n                                                      </div>\n                                                    </CardContent>\n                                                  </Card>\n                                                ))}\n                                              </div>\n                                            ) : (\n                                              <div className=\"flex flex-col items-center justify-center py-6 text-center\">\n                                                <Users className=\"h-10 w-10 text-muted-foreground/50 mb-2\" />\n                                                <p className=\"text-sm font-medium text-foreground\">No buyer interests yet</p>\n                                                <p className=\"text-xs text-muted-foreground mt-1\">\n                                                  Buyer interests will appear here once added\n                                                </p>\n                                              </div>\n                                            )}\n                                          </div>\n                                        </TableCell>\n                                      </TableRow>\n                                    )}\n                                  </>\n                                ))}\n                              </TableBody>\n                            </Table>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </>\n                ))}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card className=\"py-12\">\n          <CardContent className=\"flex flex-col items-center justify-center text-center\">\n            <Building2 className=\"h-16 w-16 text-muted-foreground/50 mb-4\" />\n            <p className=\"text-lg font-medium text-foreground\">No projects found</p>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              Add a new project to get started\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":38534},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/pages/salesperson-dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { ClipboardList, Calendar, CheckCircle, DollarSign } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\nimport type { SalespersonStats, Lead } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\nexport default function SalespersonDashboard() {\n  const [, setLocation] = useLocation();\n\n  const { data: stats, isLoading: statsLoading } = useQuery<SalespersonStats>({\n    queryKey: [\"/api/dashboard/salesperson\"],\n  });\n\n  const { data: todayFollowUps, isLoading: followUpsLoading } = useQuery<Lead[]>({\n    queryKey: [\"/api/leads/today-followups\"],\n  });\n\n  const getRatingColor = (rating: string) => {\n    switch (rating) {\n      case \"Urgent\": return \"bg-red-500 text-white\";\n      case \"High\": return \"bg-yellow-500 text-foreground\";\n      case \"Low\": return \"bg-blue-500 text-white\";\n      default: return \"bg-secondary\";\n    }\n  };\n\n  if (statsLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold text-foreground\">My Dashboard</h1>\n        <p className=\"text-muted-foreground mt-1\">Your performance overview</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center gap-2\">\n              <ClipboardList className=\"h-5 w-5 text-primary\" />\n              <span className=\"text-sm font-medium text-muted-foreground\">Assigned Leads</span>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-3xl font-bold\">{stats?.assignedLeads || 0}</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center gap-2\">\n              <Calendar className=\"h-5 w-5 text-blue-600\" />\n              <span className=\"text-sm font-medium text-muted-foreground\">Today's Follow-ups</span>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-3xl font-bold\">{stats?.todayFollowUps || 0}</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              <span className=\"text-sm font-medium text-muted-foreground\">Conversions</span>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-3xl font-bold text-green-600 dark:text-green-400\">{stats?.convertedLeads || 0}</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center gap-2\">\n              <DollarSign className=\"h-5 w-5 text-yellow-600\" />\n              <span className=\"text-sm font-medium text-muted-foreground\">Revenue</span>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-3xl font-bold\">₹{((stats?.totalRevenue || 0) / 100000).toFixed(1)}L</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Today's Follow-ups</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {followUpsLoading ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : todayFollowUps && todayFollowUps.length > 0 ? (\n            <div className=\"space-y-3\">\n              {todayFollowUps.map((lead) => (\n                <div\n                  key={lead._id}\n                  className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-accent/50 transition-colors\"\n                  data-testid={`followup-${lead._id}`}\n                >\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium\">{lead.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">{lead.phone}</p>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge className={getRatingColor(lead.rating)}>\n                      {lead.rating}\n                    </Badge>\n                    <Button\n                      size=\"sm\"\n                      onClick={() => setLocation('/leads')}\n                      data-testid={`button-view-lead-${lead._id}`}\n                    >\n                      View\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <p className=\"text-center py-8 text-muted-foreground\">No follow-ups scheduled for today</p>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5179},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"server/middleware/auth.ts":{"content":"import type { Request, Response, NextFunction } from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport type { UserRole } from \"@shared/schema\";\n\nconst JWT_SECRET = process.env.SESSION_SECRET;\n\nif (!JWT_SECRET) {\n  throw new Error(\"SESSION_SECRET environment variable is required\");\n}\n\nexport interface AuthRequest extends Request {\n  user?: {\n    _id: string;\n    name: string;\n    email: string;\n    role: UserRole;\n  };\n}\n\nexport function authenticateToken(\n  req: AuthRequest,\n  res: Response,\n  next: NextFunction\n) {\n  const authHeader = req.headers[\"authorization\"];\n  const token = authHeader && authHeader.split(\" \")[1];\n\n  if (!token) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as {\n      _id: string;\n      name: string;\n      email: string;\n      role: UserRole;\n    };\n    req.user = decoded;\n    next();\n  } catch (error) {\n    return res.status(403).json({ message: \"Invalid or expired token\" });\n  }\n}\n\nexport function requireAdmin(req: AuthRequest, res: Response, next: NextFunction) {\n  if (req.user?.role !== \"admin\") {\n    return res.status(403).json({ message: \"Admin access required\" });\n  }\n  next();\n}\n\nexport function generateToken(payload: { _id: string; name: string; email: string; role: UserRole }) {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: \"30d\" });\n}\n","size_bytes":1388},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// User roles\nexport const userRoles = [\"admin\", \"salesperson\"] as const;\nexport type UserRole = typeof userRoles[number];\n\n// Lead statuses\nexport const leadStatuses = [\"New\", \"Contacted\", \"Interested\", \"Site Visit\", \"Booked\", \"Lost\"] as const;\nexport type LeadStatus = typeof leadStatuses[number];\n\n// Lead ratings\nexport const leadRatings = [\"Urgent\", \"High\", \"Low\"] as const;\nexport type LeadRating = typeof leadRatings[number];\n\n// Lead classifications\nexport const leadClassifications = [\"Important\", \"Inquiry\"] as const;\nexport type LeadClassification = typeof leadClassifications[number];\n\n// Lead sources\nexport const leadSources = [\"Website\", \"Facebook\", \"Google Ads\", \"Referral\", \"Walk-in\", \"Other\"] as const;\nexport type LeadSource = typeof leadSources[number];\n\n// Plot statuses\nexport const plotStatuses = [\"Available\", \"Booked\", \"Hold\", \"Sold\"] as const;\nexport type PlotStatus = typeof plotStatuses[number];\n\n// Plot categories\nexport const plotCategories = [\"Investment Plot\", \"Bungalow Plot\", \"Residential Plot\", \"Commercial Plot\", \"Open Plot\"] as const;\nexport type PlotCategory = typeof plotCategories[number];\n\n// Payment modes\nexport const paymentModes = [\"Cash\", \"UPI\", \"Cheque\", \"Bank Transfer\"] as const;\nexport type PaymentMode = typeof paymentModes[number];\n\n// Booking types\nexport const bookingTypes = [\"Token\", \"Full\"] as const;\nexport type BookingType = typeof bookingTypes[number];\n\n// ============= User Schema =============\nexport interface User {\n  _id: string;\n  name: string;\n  email: string;\n  password: string;\n  role: UserRole;\n  phone?: string;\n  createdAt: Date;\n}\n\nexport const insertUserSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Invalid email\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  role: z.enum(userRoles),\n  phone: z.string().optional(),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport const updateUserSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Invalid email\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\").optional().or(z.literal(\"\")),\n  role: z.enum(userRoles),\n  phone: z.string().optional(),\n});\n\nexport type UpdateUser = z.infer<typeof updateUserSchema>;\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Invalid email\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport type LoginCredentials = z.infer<typeof loginSchema>;\n\n// ============= Lead Schema =============\nexport interface PopulatedUser {\n  _id: string;\n  name: string;\n  email: string;\n}\n\nexport interface Lead {\n  _id: string;\n  name: string;\n  email?: string;\n  phone: string;\n  source: LeadSource;\n  status: LeadStatus;\n  rating: LeadRating;\n  classification?: LeadClassification;\n  assignedTo?: string | PopulatedUser;\n  assignedBy?: string | PopulatedUser;\n  followUpDate?: Date;\n  notes?: string;\n  projectId?: string;\n  plotIds?: string[];\n  highestOffer?: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport const insertLeadSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Invalid email\").optional().or(z.literal(\"\")),\n  phone: z.string().min(10, \"Phone number must be at least 10 digits\"),\n  source: z.enum(leadSources),\n  status: z.enum(leadStatuses).default(\"New\"),\n  rating: z.enum(leadRatings).default(\"High\"),\n  classification: z.enum(leadClassifications).optional(),\n  assignedTo: z.string().optional(),\n  followUpDate: z.string().optional(),\n  notes: z.string().optional(),\n  projectId: z.string().optional(),\n  plotIds: z.array(z.string()).optional(),\n  highestOffer: z.coerce.number().min(0, \"Offer must be positive\").optional(),\n});\n\nexport type InsertLead = z.infer<typeof insertLeadSchema>;\n\n// ============= Lead Interest Schema =============\nexport interface LeadInterest {\n  _id: string;\n  leadId: string;\n  projectId: string;\n  plotIds: string[];\n  highestOffer: number;\n  notes?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport const insertLeadInterestSchema = z.object({\n  leadId: z.string().min(1, \"Lead is required\"),\n  projectId: z.string().min(1, \"Project is required\"),\n  plotIds: z.array(z.string()).min(1, \"At least one plot must be selected\"),\n  highestOffer: z.number().min(0, \"Offer must be positive\"),\n  notes: z.string().optional(),\n});\n\nexport type InsertLeadInterest = z.infer<typeof insertLeadInterestSchema>;\n\nexport const assignLeadSchema = z.object({\n  salespersonId: z.string().min(1, \"Salesperson ID is required\"),\n});\n\nexport type AssignLead = z.infer<typeof assignLeadSchema>;\n\nexport const transferLeadSchema = z.object({\n  salespersonId: z.string().min(1, \"Salesperson ID is required\"),\n});\n\nexport type TransferLead = z.infer<typeof transferLeadSchema>;\n\n// ============= Project Schema =============\nexport interface Project {\n  _id: string;\n  name: string;\n  location: string;\n  totalPlots: number;\n  description?: string;\n  createdAt: Date;\n}\n\nexport const insertProjectSchema = z.object({\n  name: z.string().min(1, \"Project name is required\"),\n  location: z.string().min(1, \"Location is required\"),\n  totalPlots: z.number().min(1, \"Total plots must be at least 1\"),\n  description: z.string().optional(),\n});\n\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\n\n// ============= Plot Schema =============\nexport interface Plot {\n  _id: string;\n  projectId: string;\n  plotNumber: string;\n  size: string;\n  price: number;\n  facing?: string;\n  status: PlotStatus;\n  category: PlotCategory;\n  amenities?: string;\n  bookedBy?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport const insertPlotSchema = z.object({\n  projectId: z.string().min(1, \"Project is required\"),\n  plotNumber: z.string().min(1, \"Plot number is required\"),\n  size: z.string().min(1, \"Size is required\"),\n  price: z.number().min(0, \"Price must be positive\"),\n  facing: z.string().optional(),\n  status: z.enum(plotStatuses).default(\"Available\"),\n  category: z.enum(plotCategories),\n  amenities: z.string().optional(),\n});\n\nexport type InsertPlot = z.infer<typeof insertPlotSchema>;\n\n// ============= Payment Schema =============\nexport interface Payment {\n  _id: string;\n  leadId: string;\n  plotId: string;\n  amount: number;\n  mode: PaymentMode;\n  bookingType: BookingType;\n  transactionId?: string;\n  notes?: string;\n  createdAt: Date;\n}\n\nexport const insertPaymentSchema = z.object({\n  leadId: z.string().min(1, \"Lead is required\"),\n  plotId: z.string().min(1, \"Plot is required\"),\n  amount: z.number().min(0, \"Amount must be positive\"),\n  mode: z.enum(paymentModes),\n  bookingType: z.enum(bookingTypes),\n  transactionId: z.string().optional(),\n  notes: z.string().optional(),\n});\n\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\n\n// ============= Activity Log Schema =============\nexport interface ActivityLog {\n  _id: string;\n  userId: string;\n  userName: string;\n  action: string;\n  entityType: \"lead\" | \"plot\" | \"payment\" | \"user\";\n  entityId: string;\n  details: string;\n  createdAt: Date;\n}\n\nexport const insertActivityLogSchema = z.object({\n  userId: z.string(),\n  userName: z.string(),\n  action: z.string(),\n  entityType: z.enum([\"lead\", \"plot\", \"payment\", \"user\"]),\n  entityId: z.string(),\n  details: z.string(),\n});\n\nexport type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;\n\n// ============= Buyer Interest Schema =============\nexport interface BuyerInterest {\n  _id: string;\n  plotId: string;\n  buyerName: string;\n  buyerContact: string;\n  buyerEmail?: string;\n  offeredPrice: number;\n  salespersonId: string;\n  salespersonName: string;\n  notes?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport const insertBuyerInterestSchema = z.object({\n  plotId: z.string().min(1, \"Plot is required\"),\n  buyerName: z.string().min(1, \"Buyer name is required\"),\n  buyerContact: z.string().min(10, \"Contact number must be at least 10 digits\"),\n  buyerEmail: z.string().email(\"Invalid email\").optional().or(z.literal(\"\")),\n  offeredPrice: z.number().min(0, \"Offered price must be positive\"),\n  salespersonId: z.string().min(1, \"Salesperson is required\"),\n  notes: z.string().optional(),\n});\n\nexport type InsertBuyerInterest = z.infer<typeof insertBuyerInterestSchema>;\n\n// ============= Call Log Schema =============\nexport const callStatuses = [\"Called - No Answer\", \"Called - Answered\", \"Follow Up Scheduled\", \"Not Interested\", \"Interested\", \"Meeting Scheduled\"] as const;\nexport type CallStatus = typeof callStatuses[number];\n\nexport interface CallLog {\n  _id: string;\n  leadId: string;\n  salespersonId: string;\n  salespersonName: string;\n  callStatus: CallStatus;\n  callDuration?: number;\n  notes?: string;\n  nextFollowUpDate?: Date;\n  createdAt: Date;\n}\n\nexport const insertCallLogSchema = z.object({\n  leadId: z.string().min(1, \"Lead is required\"),\n  callStatus: z.enum(callStatuses),\n  callDuration: z.number().min(0, \"Duration must be positive\").optional(),\n  notes: z.string().optional(),\n  nextFollowUpDate: z.string().optional(),\n});\n\nexport type InsertCallLog = z.infer<typeof insertCallLogSchema>;\n\n// ============= Dashboard Stats =============\nexport interface DashboardStats {\n  totalLeads: number;\n  convertedLeads: number;\n  lostLeads: number;\n  unassignedLeads: number;\n  totalProjects: number;\n  totalPlots: number;\n  availablePlots: number;\n  bookedPlots: number;\n  totalRevenue: number;\n  todayFollowUps: number;\n}\n\nexport interface SalespersonStats {\n  assignedLeads: number;\n  todayFollowUps: number;\n  convertedLeads: number;\n  totalRevenue: number;\n}\n\n// ============= Analytics Types =============\nexport interface AnalyticsOverview {\n  totalLeads: number;\n  convertedLeads: number;\n  conversionRate: string;\n  totalSalespersons: number;\n  totalRevenue: number;\n  totalBuyerInterests: number;\n  totalBookings: number;\n  avgResponseTime: number;\n  activeLeads: number;\n}\n\nexport interface SalespersonPerformance {\n  id: string;\n  name: string;\n  email: string;\n  totalContacts: number;\n  leadsAssigned: number;\n  conversions: number;\n  conversionRate: number;\n  buyerInterestsAdded: number;\n  revenue: number;\n  lastActivity: string | null;\n  lastActivityDetails: string;\n  \n  approached: number;\n  contacted: number;\n  interested: number;\n  siteVisits: number;\n  lost: number;\n  \n  dailyMetrics: {\n    approached: number;\n    contacted: number;\n    interested: number;\n    conversions: number;\n  };\n  weeklyMetrics: {\n    approached: number;\n    contacted: number;\n    interested: number;\n    conversions: number;\n  };\n  monthlyMetrics: {\n    approached: number;\n    contacted: number;\n    interested: number;\n    conversions: number;\n  };\n}\n\nexport interface CustomerContactDetail {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  status: LeadStatus;\n  rating: LeadRating;\n  source: LeadSource;\n  contactedDate: string;\n  lastContactDate: string;\n  salespersonName: string;\n  salespersonEmail: string;\n  notes?: string;\n  followUpDate?: string;\n}\n\nexport interface DailyMetric {\n  date: string;\n  leadsCreated: number;\n  conversions: number;\n  buyerInterests: number;\n  bookings: number;\n}\n\nexport interface MonthlyMetric {\n  month: string;\n  leadsCreated: number;\n  conversions: number;\n  revenue: number;\n}\n\nexport interface ActivityTimeline {\n  id: string;\n  userName: string;\n  action: string;\n  entityType: string;\n  details: string;\n  createdAt: string;\n  userDetails: string;\n}\n\nexport interface LeadSourceAnalysis {\n  source: string;\n  totalLeads: number;\n  conversions: number;\n  conversionRate: string;\n}\n\nexport interface PlotCategoryPerformance {\n  category: string;\n  totalPlots: number;\n  available: number;\n  booked: number;\n  sold: number;\n  avgPrice: number;\n  occupancyRate: string;\n}\n\n// ============= API Response Types =============\nexport interface AuthResponse {\n  token: string;\n  user: {\n    _id: string;\n    name: string;\n    email: string;\n    role: UserRole;\n  };\n}\n","size_bytes":11938},"client/src/lib/auth.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport type { AuthResponse, UserRole } from \"@shared/schema\";\n\ninterface AuthUser {\n  _id: string;\n  name: string;\n  email: string;\n  role: UserRole;\n}\n\ninterface AuthContextType {\n  user: AuthUser | null;\n  token: string | null;\n  login: (authData: AuthResponse) => void;\n  logout: () => void;\n  isAuthenticated: boolean;\n  isAdmin: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  // Initialize state from localStorage immediately to prevent flicker\n  const [user, setUser] = useState<AuthUser | null>(() => {\n    try {\n      const savedUser = localStorage.getItem(\"user\");\n      if (savedUser && savedUser !== \"undefined\") {\n        return JSON.parse(savedUser);\n      }\n    } catch (error) {\n      console.error(\"Failed to parse saved user data:\", error);\n    }\n    return null;\n  });\n  \n  const [token, setToken] = useState<string | null>(() => {\n    return localStorage.getItem(\"token\");\n  });\n  \n  const [, setLocation] = useLocation();\n\n  const login = (authData: AuthResponse) => {\n    setToken(authData.token);\n    setUser(authData.user);\n    localStorage.setItem(\"token\", authData.token);\n    localStorage.setItem(\"user\", JSON.stringify(authData.user));\n  };\n\n  const logout = () => {\n    setToken(null);\n    setUser(null);\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    queryClient.clear(); // Clear all cached queries on logout\n    setLocation(\"/login\");\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        token,\n        login,\n        logout,\n        isAuthenticated: !!token,\n        isAdmin: user?.role === \"admin\",\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2120},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport bcrypt from \"bcryptjs\";\nimport {\n  UserModel,\n  LeadModel,\n  ProjectModel,\n  PlotModel,\n  PaymentModel,\n  ActivityLogModel,\n  BuyerInterestModel,\n  LeadInterestModel,\n  CallLogModel,\n} from \"./models\";\nimport { authenticateToken, requireAdmin, generateToken, type AuthRequest } from \"./middleware/auth\";\nimport { broadcastUpdate, wsEvents } from \"./websocket\";\nimport type { AuthResponse, DashboardStats, SalespersonStats } from \"@shared/schema\";\nimport {\n  loginSchema,\n  insertUserSchema,\n  updateUserSchema,\n  insertLeadSchema,\n  assignLeadSchema,\n  transferLeadSchema,\n  insertProjectSchema,\n  insertPlotSchema,\n  insertPaymentSchema,\n  insertBuyerInterestSchema,\n  insertLeadInterestSchema,\n  insertCallLogSchema,\n} from \"@shared/schema\";\nimport { startOfDay, endOfDay, startOfMonth, endOfMonth, startOfWeek, format } from \"date-fns\";\n\nexport function registerRoutes(app: Express) {\n  // ============= Authentication Routes =============\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const validationResult = loginSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ message: \"Invalid request data\" });\n      }\n\n      const { email, password } = validationResult.data;\n\n      const user = await UserModel.findOne({ email });\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const token = generateToken({\n        _id: String(user._id),\n        name: user.name,\n        email: user.email,\n        role: user.role,\n      });\n\n      // Log login activity\n      await ActivityLogModel.create({\n        userId: user._id,\n        userName: user.name,\n        action: \"User Login\",\n        entityType: \"user\",\n        entityId: user._id,\n        details: `${user.name} (${user.role}) logged in`,\n      });\n\n      const response: AuthResponse = {\n        token,\n        user: {\n          _id: String(user._id),\n          name: user.name,\n          email: user.email,\n          role: user.role,\n        },\n      };\n\n      res.json(response);\n    } catch (error: any) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  // ============= User Routes =============\n  app.get(\"/api/users/salespersons\", authenticateToken, async (req, res) => {\n    try {\n      const salespersons = await UserModel.find({ role: \"salesperson\" })\n        .select(\"-password\")\n        .sort({ createdAt: -1 });\n      res.json(salespersons);\n    } catch (error: any) {\n      console.error(\"Get salespersons error:\", error);\n      res.status(500).json({ message: \"Failed to fetch salespersons\" });\n    }\n  });\n\n  app.post(\"/api/users\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const validationResult = insertUserSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ message: \"Invalid request data\" });\n      }\n\n      const { name, email, password, role, phone } = validationResult.data;\n\n      const existingUser = await UserModel.findOne({ email });\n      if (existingUser) {\n        return res.status(400).json({ message: \"Email already exists\" });\n      }\n\n      const hashedPassword = await bcrypt.hash(password, 10);\n\n      const user = await UserModel.create({\n        name,\n        email,\n        password: hashedPassword,\n        role,\n        phone,\n      });\n\n      // Log activity\n      const authReq = req as AuthRequest;\n      await ActivityLogModel.create({\n        userId: authReq.user!._id,\n        userName: authReq.user!.name,\n        action: \"Created User\",\n        entityType: \"user\",\n        entityId: user._id,\n        details: `Created ${role} account for ${name}`,\n      });\n\n      const userResponse = user.toObject();\n      delete (userResponse as any).password;\n      res.status(201).json(userResponse);\n    } catch (error: any) {\n      console.error(\"Create user error:\", error);\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.patch(\"/api/users/:id\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const validationResult = updateUserSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ message: \"Invalid request data\" });\n      }\n\n      const { name, email, password, role, phone } = validationResult.data;\n\n      const user = await UserModel.findById(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (email !== user.email) {\n        const existingUser = await UserModel.findOne({ email });\n        if (existingUser) {\n          return res.status(400).json({ message: \"Email already exists\" });\n        }\n      }\n\n      user.name = name;\n      user.email = email;\n      user.role = role;\n      user.phone = phone;\n\n      if (password && password.trim() !== \"\") {\n        const hashedPassword = await bcrypt.hash(password, 10);\n        user.password = hashedPassword;\n      }\n\n      await user.save();\n\n      const authReq = req as AuthRequest;\n      await ActivityLogModel.create({\n        userId: authReq.user!._id,\n        userName: authReq.user!.name,\n        action: \"Updated User\",\n        entityType: \"user\",\n        entityId: user._id,\n        details: `Updated ${role} account for ${name}`,\n      });\n\n      const userResponse = user.toObject();\n      delete (userResponse as any).password;\n      res.json(userResponse);\n    } catch (error: any) {\n      console.error(\"Update user error:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  app.delete(\"/api/users/:id\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      await UserModel.findByIdAndDelete(req.params.id);\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Delete user error:\", error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  // ============= Lead Routes =============\n  app.get(\"/api/leads\", authenticateToken, async (req, res) => {\n    try {\n      const authReq = req as AuthRequest;\n      // Admins see all leads, Salespersons see all leads (admin leads + their own)\n      const leads = await LeadModel.find({})\n        .populate(\"assignedTo\", \"name email\")\n        .populate(\"assignedBy\", \"name email\")\n        .sort({ createdAt: -1 });\n      res.json(leads);\n    } catch (error: any) {\n      console.error(\"Get leads error:\", error);\n      res.status(500).json({ message: \"Failed to fetch leads\" });\n    }\n  });\n\n  app.get(\"/api/leads/today-followups\", authenticateToken, async (req, res) => {\n    try {\n      const authReq = req as AuthRequest;\n      const today = new Date();\n      const startDate = startOfDay(today);\n      const endDate = endOfDay(today);\n\n      const query = authReq.user!.role === \"admin\"\n        ? {\n            followUpDate: {\n              $gte: startDate,\n              $lte: endDate,\n            },\n          }\n        : {\n            assignedTo: authReq.user!._id,\n            followUpDate: {\n              $gte: startDate,\n              $lte: endDate,\n            },\n          };\n\n      const leads = await LeadModel.find(query)\n        .populate(\"assignedTo\", \"name email\")\n        .sort({ followUpDate: 1 });\n      res.json(leads);\n    } catch (error: any) {\n      console.error(\"Get today followups error:\", error);\n      res.status(500).json({ message: \"Failed to fetch follow-ups\" });\n    }\n  });\n\n  app.get(\"/api/leads/contacted\", authenticateToken, async (req, res) => {\n    try {\n      const authReq = req as AuthRequest;\n      const query = authReq.user!.role === \"admin\"\n        ? { status: \"Contacted\" }\n        : { assignedTo: authReq.user!._id, status: \"Contacted\" };\n\n      const leads = await LeadModel.find(query)\n        .populate(\"assignedTo\", \"name email\")\n        .sort({ updatedAt: -1 })\n        .limit(20);\n      res.json(leads);\n    } catch (error: any) {\n      console.error(\"Get contacted leads error:\", error);\n      res.status(500).json({ message: \"Failed to fetch contacted leads\" });\n    }\n  });\n\n  app.post(\"/api/leads\", authenticateToken, async (req, res) => {\n    try {\n      const validationResult = insertLeadSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ message: \"Invalid request data\" });\n      }\n\n      const { projectId, plotIds, highestOffer, ...leadData } = validationResult.data;\n      const authReq = req as AuthRequest;\n      \n      // Auto-assign to salesperson if they create the lead and no assignedTo is specified\n      const assignedTo = leadData.assignedTo || \n        (authReq.user!.role === \"salesperson\" ? authReq.user!._id : undefined);\n      \n      // Create lead with highestOffer, projectId, and plotIds\n      const lead = await LeadModel.create({\n        ...leadData,\n        assignedTo,\n        projectId,\n        plotIds,\n        highestOffer,\n      });\n\n      // If project and plots are selected, create a lead interest record\n      if (projectId && plotIds && plotIds.length > 0) {\n        await LeadInterestModel.create({\n          leadId: lead._id,\n          projectId,\n          plotIds,\n          highestOffer: highestOffer || 0,\n          notes: `Initial interest from lead creation`,\n        });\n      }\n\n      // Log activity\n      await ActivityLogModel.create({\n        userId: authReq.user!._id,\n        userName: authReq.user!.name,\n        action: \"Created Lead\",\n        entityType: \"lead\",\n        entityId: lead._id,\n        details: `Created lead for ${lead.name}${projectId ? ' with project interest' : ''}`,\n      });\n\n      broadcastUpdate(wsEvents.LEAD_CREATED, {\n        leadId: lead._id,\n        assignedTo: lead.assignedTo,\n      });\n\n      if (projectId && plotIds && plotIds.length > 0) {\n        broadcastUpdate(wsEvents.LEAD_INTEREST_CREATED, {\n          leadId: lead._id,\n          projectId,\n          plotIds,\n        });\n      }\n\n      res.status(201).json(lead);\n    } catch (error: any) {\n      console.error(\"Create lead error:\", error);\n      res.status(500).json({ message: \"Failed to create lead\" });\n    }\n  });\n\n  app.patch(\"/api/leads/:id/assign\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const validationResult = assignLeadSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ message: \"Invalid request data\" });\n      }\n\n      const { salespersonId } = validationResult.data;\n      const authReq = req as AuthRequest;\n\n      const lead = await LeadModel.findByIdAndUpdate(\n        req.params.id,\n        {\n          assignedTo: salespersonId,\n          assignedBy: authReq.user!._id,\n        },\n        { new: true }\n      );\n\n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n\n      // Log activity\n      const salesperson = await UserModel.findById(salespersonId);\n      await ActivityLogModel.create({\n        userId: authReq.user!._id,\n        userName: authReq.user!.name,\n        action: \"Assigned Lead\",\n        entityType: \"lead\",\n        entityId: lead._id,\n        details: `Assigned lead ${lead.name} to ${salesperson?.name}`,\n      });\n\n      broadcastUpdate(wsEvents.LEAD_ASSIGNED, {\n        leadId: lead._id,\n        salespersonId,\n      });\n\n      res.json(lead);\n    } catch (error: any) {\n      console.error(\"Assign lead error:\", error);\n      res.status(500).json({ message: \"Failed to assign lead\" });\n    }\n  });\n\n  app.patch(\"/api/leads/:id/transfer\", authenticateToken, async (req, res) => {\n    try {\n      const validationResult = transferLeadSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ message: \"Invalid request data\" });\n      }\n\n      const { salespersonId } = validationResult.data;\n      const authReq = req as AuthRequest;\n\n      const existingLead = await LeadModel.findById(req.params.id);\n      \n      if (!existingLead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n\n      // Check if the lead is assigned to the current user (salesperson can only transfer their own leads)\n      // Admins can transfer any lead, but salespersons can only transfer leads assigned to them\n      if (authReq.user!.role === \"salesperson\") {\n        if (!existingLead.assignedTo || String(existingLead.assignedTo) !== authReq.user!._id) {\n          return res.status(403).json({ message: \"You can only transfer leads assigned to you\" });\n        }\n      }\n\n      const lead = await LeadModel.findByIdAndUpdate(\n        req.params.id,\n        {\n          assignedTo: salespersonId,\n          assignedBy: authReq.user!._id,\n        },\n        { new: true }\n      ).populate(\"assignedTo\", \"name email\");\n\n      // Log activity\n      const salesperson = await UserModel.findById(salespersonId);\n      await ActivityLogModel.create({\n        userId: authReq.user!._id,\n        userName: authReq.user!.name,\n        action: \"Transferred Lead\",\n        entityType: \"lead\",\n        entityId: lead!._id,\n        details: `Transferred lead ${lead!.name} to ${salesperson?.name}`,\n      });\n\n      res.json(lead);\n    } catch (error: any) {\n      console.error(\"Transfer lead error:\", error);\n      res.status(500).json({ message: \"Failed to transfer lead\" });\n    }\n  });\n\n  app.patch(\"/api/leads/:id\", authenticateToken, async (req, res) => {\n    try {\n      const validationResult = insertLeadSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ message: \"Invalid request data\" });\n      }\n\n      const { projectId, plotIds, highestOffer, ...leadData } = validationResult.data;\n      const authReq = req as AuthRequest;\n      \n      // Auto-assign to salesperson if they edit and no assignedTo is specified\n      const existingLead = await LeadModel.findById(req.params.id);\n      const assignedTo = leadData.assignedTo || \n        (existingLead && !existingLead.assignedTo && authReq.user!.role === \"salesperson\" \n          ? authReq.user!._id \n          : existingLead?.assignedTo);\n\n      // Update the lead with all data including highestOffer\n      const lead = await LeadModel.findByIdAndUpdate(\n        req.params.id,\n        { ...leadData, assignedTo, projectId, plotIds, highestOffer },\n        { new: true }\n      );\n\n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n\n      // Handle LeadInterest management based on project and plot data\n      if (projectId && plotIds && plotIds.length > 0) {\n        // Find existing lead interest for this lead and project\n        const existingInterest = await LeadInterestModel.findOne({\n          leadId: lead._id,\n          projectId: projectId,\n        });\n\n        if (existingInterest) {\n          // Update existing interest\n          await LeadInterestModel.findByIdAndUpdate(existingInterest._id, {\n            plotIds,\n            highestOffer: highestOffer || 0,\n            notes: `Updated from lead edit on ${new Date().toISOString()}`,\n          });\n        } else {\n          // Create new interest\n          await LeadInterestModel.create({\n            leadId: lead._id,\n            projectId,\n            plotIds,\n            highestOffer: highestOffer || 0,\n            notes: `Added from lead edit on ${new Date().toISOString()}`,\n          });\n        }\n      } else {\n        // If project is cleared OR plots are empty, remove all lead interests for this lead\n        // This ensures stale data doesn't persist in the plots overview\n        await LeadInterestModel.deleteMany({ leadId: lead._id });\n      }\n\n      await ActivityLogModel.create({\n        userId: authReq.user!._id,\n        userName: authReq.user!.name,\n        action: \"Updated Lead\",\n        entityType: \"lead\",\n        entityId: lead._id,\n        details: `Updated lead ${lead.name}${projectId ? ' with project interest' : ''}`,\n      });\n\n      res.json(lead);\n    } catch (error: any) {\n      console.error(\"Update lead error:\", error);\n      res.status(500).json({ message: \"Failed to update lead\" });\n    }\n  });\n\n  app.delete(\"/api/leads/:id\", authenticateToken, async (req, res) => {\n    try {\n      await LeadModel.findByIdAndDelete(req.params.id);\n      res.json({ message: \"Lead deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Delete lead error:\", error);\n      res.status(500).json({ message: \"Failed to delete lead\" });\n    }\n  });\n\n  // ============= Lead Interest Routes =============\n  app.get(\"/api/lead-interests\", authenticateToken, async (req, res) => {\n    try {\n      const authReq = req as AuthRequest;\n      let interests;\n\n      if (authReq.user!.role === \"admin\") {\n        interests = await LeadInterestModel.find()\n          .populate(\"leadId\")\n          .populate(\"projectId\")\n          .populate(\"plotIds\")\n          .sort({ createdAt: -1 });\n      } else {\n        const assignedLeads = await LeadModel.find({ assignedTo: authReq.user!._id });\n        const leadIds = assignedLeads.map(lead => lead._id);\n        interests = await LeadInterestModel.find({ leadId: { $in: leadIds } })\n          .populate(\"leadId\")\n          .populate(\"projectId\")\n          .populate(\"plotIds\")\n          .sort({ createdAt: -1 });\n      }\n\n      res.json(interests);\n    } catch (error: any) {\n      console.error(\"Get lead interests error:\", error);\n      res.status(500).json({ message: \"Failed to fetch lead interests\" });\n    }\n  });\n\n  app.get(\"/api/lead-interests/lead/:leadId\", authenticateToken, async (req, res) => {\n    try {\n      const authReq = req as AuthRequest;\n      \n      if (authReq.user!.role !== \"admin\") {\n        const lead = await LeadModel.findOne({ \n          _id: req.params.leadId, \n          assignedTo: authReq.user!._id \n        });\n        if (!lead) {\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n      }\n\n      const interests = await LeadInterestModel.find({ leadId: req.params.leadId })\n        .populate(\"projectId\")\n        .populate(\"plotIds\")\n        .sort({ createdAt: -1 });\n      res.json(interests);\n    } catch (error: any) {\n      console.error(\"Get lead interests by lead error:\", error);\n      res.status(500).json({ message: \"Failed to fetch lead interests\" });\n    }\n  });\n\n  app.get(\"/api/lead-interests/plot/:plotId\", authenticateToken, async (req, res) => {\n    try {\n      const authReq = req as AuthRequest;\n      let interests;\n\n      if (authReq.user!.role === \"admin\") {\n        interests = await LeadInterestModel.find({ plotIds: req.params.plotId })\n          .populate(\"leadId\")\n          .populate(\"projectId\")\n          .sort({ createdAt: -1 });\n      } else {\n        const assignedLeads = await LeadModel.find({ assignedTo: authReq.user!._id });\n        const leadIds = assignedLeads.map(lead => lead._id);\n        interests = await LeadInterestModel.find({ \n          plotIds: req.params.plotId,\n          leadId: { $in: leadIds }\n        })\n          .populate(\"leadId\")\n          .populate(\"projectId\")\n          .sort({ createdAt: -1 });\n      }\n\n      res.json(interests);\n    } catch (error: any) {\n      console.error(\"Get lead interests by plot error:\", error);\n      res.status(500).json({ message: \"Failed to fetch lead interests\" });\n    }\n  });\n\n  app.post(\"/api/lead-interests\", authenticateToken, async (req, res) => {\n    try {\n      const validationResult = insertLeadInterestSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ message: \"Invalid request data\" });\n      }\n\n      const { leadId, projectId, plotIds } = validationResult.data;\n\n      const lead = await LeadModel.findById(leadId);\n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n\n      const authReq = req as AuthRequest;\n      if (authReq.user!.role !== \"admin\" && String(lead.assignedTo) !== authReq.user!._id) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const project = await ProjectModel.findById(projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const plots = await PlotModel.find({ _id: { $in: plotIds } });\n      if (plots.length !== plotIds.length) {\n        return res.status(404).json({ message: \"One or more plots not found\" });\n      }\n\n      const invalidPlots = plots.filter(plot => String(plot.projectId) !== projectId);\n      if (invalidPlots.length > 0) {\n        return res.status(400).json({ message: \"All plots must belong to the specified project\" });\n      }\n\n      const interest = await LeadInterestModel.create(validationResult.data);\n\n      await ActivityLogModel.create({\n        userId: authReq.user!._id,\n        userName: authReq.user!.name,\n        action: \"Added Lead Interest\",\n        entityType: \"lead\",\n        entityId: leadId,\n        details: `Added interest for ${lead.name} in ${project.name}`,\n      });\n\n      broadcastUpdate(wsEvents.LEAD_INTEREST_CREATED, {\n        leadId,\n        projectId,\n        plotIds,\n      });\n\n      const populatedInterest = await LeadInterestModel.findById(interest._id)\n        .populate(\"leadId\")\n        .populate(\"projectId\")\n        .populate(\"plotIds\");\n\n      res.status(201).json(populatedInterest);\n    } catch (error: any) {\n      console.error(\"Create lead interest error:\", error);\n      res.status(500).json({ message: \"Failed to create lead interest\" });\n    }\n  });\n\n  app.patch(\"/api/lead-interests/:id\", authenticateToken, async (req, res) => {\n    try {\n      const validationResult = insertLeadInterestSchema.partial().safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ message: \"Invalid request data\" });\n      }\n\n      const existingInterest = await LeadInterestModel.findById(req.params.id).populate(\"leadId\");\n      if (!existingInterest) {\n        return res.status(404).json({ message: \"Lead interest not found\" });\n      }\n\n      const authReq = req as AuthRequest;\n      const lead = existingInterest.leadId as any;\n      if (authReq.user!.role !== \"admin\" && String(lead.assignedTo) !== authReq.user!._id) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      if (validationResult.data.projectId) {\n        if (authReq.user!.role !== \"admin\") {\n          return res.status(403).json({ message: \"Only admins can change project assignments\" });\n        }\n\n        if (!validationResult.data.plotIds) {\n          return res.status(400).json({ message: \"plotIds must be provided when updating projectId\" });\n        }\n\n        const project = await ProjectModel.findById(validationResult.data.projectId);\n        if (!project) {\n          return res.status(404).json({ message: \"Project not found\" });\n        }\n      }\n\n      const finalProjectId = validationResult.data.projectId || existingInterest.projectId;\n\n      if (validationResult.data.plotIds) {\n        const plots = await PlotModel.find({ _id: { $in: validationResult.data.plotIds } });\n        if (plots.length !== validationResult.data.plotIds.length) {\n          return res.status(404).json({ message: \"One or more plots not found\" });\n        }\n        const invalidPlots = plots.filter(plot => String(plot.projectId) !== String(finalProjectId));\n        if (invalidPlots.length > 0) {\n          return res.status(400).json({ message: \"All plots must belong to the specified project\" });\n        }\n      }\n\n      const interest = await LeadInterestModel.findByIdAndUpdate(\n        req.params.id,\n        validationResult.data,\n        { new: true }\n      ).populate(\"leadId\").populate(\"projectId\").populate(\"plotIds\");\n\n      res.json(interest);\n    } catch (error: any) {\n      console.error(\"Update lead interest error:\", error);\n      res.status(500).json({ message: \"Failed to update lead interest\" });\n    }\n  });\n\n  app.delete(\"/api/lead-interests/:id\", authenticateToken, async (req, res) => {\n    try {\n      const interest = await LeadInterestModel.findById(req.params.id).populate(\"leadId\");\n      if (!interest) {\n        return res.status(404).json({ message: \"Lead interest not found\" });\n      }\n\n      const authReq = req as AuthRequest;\n      const lead = interest.leadId as any;\n      if (authReq.user!.role !== \"admin\" && String(lead.assignedTo) !== authReq.user!._id) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      await LeadInterestModel.findByIdAndDelete(req.params.id);\n      res.json({ message: \"Lead interest deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Delete lead interest error:\", error);\n      res.status(500).json({ message: \"Failed to delete lead interest\" });\n    }\n  });\n\n  // ============= Project Routes =============\n  app.get(\"/api/projects\", authenticateToken, async (req, res) => {\n    try {\n      const projects = await ProjectModel.find().sort({ createdAt: -1 });\n      res.json(projects);\n    } catch (error: any) {\n      console.error(\"Get projects error:\", error);\n      res.status(500).json({ message: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.post(\"/api/projects\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const validationResult = insertProjectSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ message: \"Invalid request data\" });\n      }\n\n      const project = await ProjectModel.create(validationResult.data);\n\n      // Log activity\n      const authReq = req as AuthRequest;\n      await ActivityLogModel.create({\n        userId: authReq.user!._id,\n        userName: authReq.user!.name,\n        action: \"Created Project\",\n        entityType: \"plot\",\n        entityId: project._id,\n        details: `Created project ${project.name}`,\n      });\n\n      res.status(201).json(project);\n    } catch (error: any) {\n      console.error(\"Create project error:\", error);\n      res.status(500).json({ message: \"Failed to create project\" });\n    }\n  });\n\n  // Get projects with plot and buyer interest overview\n  app.get(\"/api/projects/overview\", authenticateToken, async (req, res) => {\n    try {\n      const projects = await ProjectModel.find().sort({ createdAt: -1 });\n      \n      const projectsOverview = await Promise.all(\n        projects.map(async (project) => {\n          const projectId = String(project._id);\n          \n          // Get all plots for this project\n          const plots = await PlotModel.find({ projectId }).sort({ plotNumber: 1 });\n          \n          // Get lead interests for all plots in this project\n          const plotIds = plots.map(p => String(p._id));\n          const leadInterests = await LeadInterestModel.find({\n            plotIds: { $in: plotIds }\n          }).populate({\n            path: \"leadId\",\n            select: \"name phone email assignedTo\",\n            populate: {\n              path: \"assignedTo\",\n              select: \"name email\"\n            }\n          });\n          \n          // Calculate project-level stats\n          const availablePlots = plots.filter(p => p.status === \"Available\").length;\n          const bookedPlots = plots.filter(p => p.status === \"Booked\").length;\n          const soldPlots = plots.filter(p => p.status === \"Sold\").length;\n          const totalInterestedBuyers = leadInterests?.length || 0;\n          \n          // Enrich plots with lead interest data only\n          const enrichedPlots = plots.map(plot => {\n            const plotId = String(plot._id);\n            \n            // Get lead interests that include this plot\n            const plotLeadInterests = leadInterests.filter(li => \n              li.plotIds.some(pid => String(pid) === plotId)\n            );\n            \n            // Calculate interest count from lead interests only\n            const interestCount = plotLeadInterests.length;\n            \n            // Calculate highest offer from lead interests\n            const leadOffers = plotLeadInterests.length > 0\n              ? plotLeadInterests.map(li => li.highestOffer)\n              : [];\n            const highestOffer = leadOffers.length > 0 ? Math.max(...leadOffers) : 0;\n            \n            // Get unique salespersons for this plot\n            const salespersonsMap = new Map();\n            \n            // Add salespersons from lead interests\n            plotLeadInterests.forEach(li => {\n              const leadDoc = li.leadId as any;\n              const assignedToDoc = leadDoc?.assignedTo;\n              \n              if (assignedToDoc) {\n                const salespersonId = assignedToDoc._id ? String(assignedToDoc._id) : String(assignedToDoc);\n                const salespersonName = assignedToDoc.name || \"Unknown\";\n                \n                if (!salespersonsMap.has(salespersonId)) {\n                  salespersonsMap.set(salespersonId, {\n                    id: salespersonId,\n                    name: salespersonName,\n                  });\n                }\n              }\n            });\n            \n            const salespersons = Array.from(salespersonsMap.values());\n            \n            return {\n              ...plot.toObject(),\n              buyerInterestCount: interestCount,\n              highestOffer,\n              salespersons,\n            };\n          });\n          \n          return {\n            ...project.toObject(),\n            totalPlots: plots.length,\n            availablePlots,\n            bookedPlots,\n            soldPlots,\n            totalInterestedBuyers,\n            plots: enrichedPlots,\n          };\n        })\n      );\n      \n      res.json(projectsOverview);\n    } catch (error: any) {\n      console.error(\"Get projects overview error:\", error);\n      res.status(500).json({ message: \"Failed to fetch projects overview\" });\n    }\n  });\n\n  // ============= Plot Routes =============\n  app.get(\"/api/plots\", authenticateToken, async (req, res) => {\n    try {\n      const plots = await PlotModel.find().sort({ plotNumber: 1 });\n      res.json(plots);\n    } catch (error: any) {\n      console.error(\"Get plots error:\", error);\n      res.status(500).json({ message: \"Failed to fetch plots\" });\n    }\n  });\n\n  app.post(\"/api/plots\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const validationResult = insertPlotSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ message: \"Invalid request data\" });\n      }\n\n      const plot = await PlotModel.create(validationResult.data);\n\n      // Log activity\n      const authReq = req as AuthRequest;\n      await ActivityLogModel.create({\n        userId: authReq.user!._id,\n        userName: authReq.user!.name,\n        action: \"Created Plot\",\n        entityType: \"plot\",\n        entityId: plot._id,\n        details: `Created plot ${plot.plotNumber}`,\n      });\n\n      res.status(201).json(plot);\n    } catch (error: any) {\n      console.error(\"Create plot error:\", error);\n      res.status(500).json({ message: \"Failed to create plot\" });\n    }\n  });\n\n  // Get plots by category\n  app.get(\"/api/plots/category/:category\", authenticateToken, async (req, res) => {\n    try {\n      const { category } = req.params;\n      const plots = await PlotModel.find({ category })\n        .populate(\"projectId\")\n        .sort({ plotNumber: 1 });\n      res.json(plots);\n    } catch (error: any) {\n      console.error(\"Get plots by category error:\", error);\n      res.status(500).json({ message: \"Failed to fetch plots\" });\n    }\n  });\n\n  // Get plot statistics (interested buyers, offers)\n  app.get(\"/api/plots/:id/stats\", authenticateToken, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const buyerInterests = await BuyerInterestModel.find({ plotId: id })\n        .populate(\"salespersonId\", \"name email phone\");\n      \n      const stats = {\n        totalInterestedBuyers: buyerInterests.length,\n        averageOfferedPrice: buyerInterests.length > 0 \n          ? buyerInterests.reduce((sum, bi) => sum + bi.offeredPrice, 0) / buyerInterests.length \n          : 0,\n        highestOffer: buyerInterests.length > 0 \n          ? Math.max(...buyerInterests.map(bi => bi.offeredPrice)) \n          : 0,\n        buyerInterests: buyerInterests,\n      };\n      \n      res.json(stats);\n    } catch (error: any) {\n      console.error(\"Get plot stats error:\", error);\n      res.status(500).json({ message: \"Failed to fetch plot statistics\" });\n    }\n  });\n\n  // ============= Buyer Interest Routes =============\n  app.get(\"/api/buyer-interests/:plotId\", authenticateToken, async (req, res) => {\n    try {\n      const { plotId } = req.params;\n      \n      // Find all lead interests that include this plot and populate lead with assignedTo\n      const leadInterests = await LeadInterestModel.find({ \n        plotIds: plotId \n      })\n        .populate({\n          path: \"leadId\",\n          select: \"name phone email assignedTo\",\n          populate: {\n            path: \"assignedTo\",\n            select: \"name email\"\n          }\n        })\n        .sort({ createdAt: -1 });\n      \n      // Transform to match the expected format\n      const transformedInterests = leadInterests.map((interest) => {\n        const lead = interest.leadId as any;\n        \n        // Get salesperson name from populated assignedTo\n        const salespersonName = lead.assignedTo?.name || \"N/A\";\n        \n        return {\n          _id: String(interest._id),\n          buyerName: lead.name,\n          buyerContact: lead.phone,\n          buyerEmail: lead.email || \"\",\n          offeredPrice: interest.highestOffer,\n          salespersonName,\n          notes: interest.notes || \"\",\n          createdAt: interest.createdAt,\n          updatedAt: interest.updatedAt,\n        };\n      });\n      \n      res.json(transformedInterests);\n    } catch (error: any) {\n      console.error(\"Get buyer interests error:\", error);\n      res.status(500).json({ message: \"Failed to fetch buyer interests\" });\n    }\n  });\n\n  app.post(\"/api/buyer-interests\", authenticateToken, async (req, res) => {\n    try {\n      const validationResult = insertBuyerInterestSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ message: \"Invalid request data\" });\n      }\n\n      const { plotId, buyerName, buyerContact, buyerEmail, offeredPrice, salespersonId, notes } = validationResult.data;\n      \n      // Get salesperson name\n      const salesperson = await UserModel.findById(salespersonId);\n      if (!salesperson) {\n        return res.status(404).json({ message: \"Salesperson not found\" });\n      }\n\n      const buyerInterest = await BuyerInterestModel.create({\n        plotId,\n        buyerName,\n        buyerContact,\n        buyerEmail,\n        offeredPrice,\n        salespersonId,\n        salespersonName: salesperson.name,\n        notes,\n      });\n\n      // Log activity\n      const authReq = req as AuthRequest;\n      const plot = await PlotModel.findById(plotId);\n      await ActivityLogModel.create({\n        userId: authReq.user!._id,\n        userName: authReq.user!.name,\n        action: \"Added Buyer Interest\",\n        entityType: \"plot\",\n        entityId: plotId,\n        details: `${buyerName} interested in plot ${plot?.plotNumber} with offer ₹${offeredPrice}`,\n      });\n\n      res.status(201).json(buyerInterest);\n    } catch (error: any) {\n      console.error(\"Create buyer interest error:\", error);\n      res.status(500).json({ message: \"Failed to create buyer interest\" });\n    }\n  });\n\n  app.delete(\"/api/buyer-interests/:id\", authenticateToken, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const buyerInterest = await BuyerInterestModel.findByIdAndDelete(id);\n      \n      if (!buyerInterest) {\n        return res.status(404).json({ message: \"Buyer interest not found\" });\n      }\n\n      res.json({ message: \"Buyer interest deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Delete buyer interest error:\", error);\n      res.status(500).json({ message: \"Failed to delete buyer interest\" });\n    }\n  });\n\n  // ============= Payment Routes =============\n  app.post(\"/api/payments\", authenticateToken, async (req, res) => {\n    try {\n      const validationResult = insertPaymentSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ message: \"Invalid request data\" });\n      }\n\n      const { leadId, plotId, amount, mode, bookingType, transactionId, notes } = validationResult.data;\n\n      // Create payment\n      const payment = await PaymentModel.create({\n        leadId,\n        plotId,\n        amount,\n        mode,\n        bookingType,\n        transactionId,\n        notes,\n      });\n\n      // Update plot status\n      await PlotModel.findByIdAndUpdate(plotId, {\n        status: bookingType === \"Full\" ? \"Sold\" : \"Booked\",\n        bookedBy: leadId,\n      });\n\n      // Update lead status\n      await LeadModel.findByIdAndUpdate(leadId, {\n        status: \"Booked\",\n      });\n\n      // Log activity\n      const authReq = req as AuthRequest;\n      const lead = await LeadModel.findById(leadId);\n      const plot = await PlotModel.findById(plotId);\n      await ActivityLogModel.create({\n        userId: authReq.user!._id,\n        userName: authReq.user!.name,\n        action: \"Created Booking\",\n        entityType: \"payment\",\n        entityId: payment._id,\n        details: `Booked plot ${plot?.plotNumber} for ${lead?.name} - ₹${amount}`,\n      });\n\n      broadcastUpdate(wsEvents.PAYMENT_CREATED, {\n        paymentId: payment._id,\n        leadId,\n        plotId,\n      });\n\n      broadcastUpdate(wsEvents.PLOT_UPDATED, {\n        plotId,\n      });\n\n      broadcastUpdate(wsEvents.METRICS_UPDATED, {});\n\n      res.status(201).json(payment);\n    } catch (error: any) {\n      console.error(\"Create payment error:\", error);\n      res.status(500).json({ message: \"Failed to create payment\" });\n    }\n  });\n\n  // ============= Call Log Routes =============\n  app.post(\"/api/call-logs\", authenticateToken, async (req, res) => {\n    try {\n      const validationResult = insertCallLogSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ message: \"Invalid request data\" });\n      }\n\n      const { leadId, callStatus, callDuration, notes, nextFollowUpDate } = validationResult.data;\n      const authReq = req as AuthRequest;\n\n      const callLog = await CallLogModel.create({\n        leadId,\n        salespersonId: authReq.user!._id,\n        salespersonName: authReq.user!.name,\n        callStatus,\n        callDuration,\n        notes,\n        nextFollowUpDate: nextFollowUpDate ? new Date(nextFollowUpDate) : undefined,\n      });\n\n      if (callStatus === \"Called - Answered\") {\n        await LeadModel.findByIdAndUpdate(leadId, {\n          status: \"Contacted\",\n        });\n      } else if (callStatus === \"Interested\" || callStatus === \"Meeting Scheduled\") {\n        await LeadModel.findByIdAndUpdate(leadId, {\n          status: \"Interested\",\n        });\n      }\n\n      if (nextFollowUpDate) {\n        await LeadModel.findByIdAndUpdate(leadId, {\n          followUpDate: new Date(nextFollowUpDate),\n        });\n      }\n\n      const lead = await LeadModel.findById(leadId);\n      await ActivityLogModel.create({\n        userId: authReq.user!._id,\n        userName: authReq.user!.name,\n        action: \"Call Logged\",\n        entityType: \"lead\",\n        entityId: leadId,\n        details: `${callStatus} - ${lead?.name || 'Lead'}`,\n      });\n\n      broadcastUpdate(wsEvents.CALL_LOG_CREATED, {\n        callLogId: callLog._id,\n        leadId,\n        salespersonId: authReq.user!._id,\n        callStatus,\n      });\n\n      broadcastUpdate(wsEvents.METRICS_UPDATED, {\n        salespersonId: authReq.user!._id,\n      });\n\n      res.status(201).json(callLog);\n    } catch (error: any) {\n      console.error(\"Create call log error:\", error);\n      res.status(500).json({ message: \"Failed to create call log\" });\n    }\n  });\n\n  app.get(\"/api/call-logs/lead/:leadId\", authenticateToken, async (req, res) => {\n    try {\n      const { leadId } = req.params;\n      const callLogs = await CallLogModel.find({ leadId })\n        .sort({ createdAt: -1 });\n      res.json(callLogs);\n    } catch (error: any) {\n      console.error(\"Get call logs error:\", error);\n      res.status(500).json({ message: \"Failed to fetch call logs\" });\n    }\n  });\n\n  app.get(\"/api/call-logs/salesperson/:salespersonId\", authenticateToken, async (req, res) => {\n    try {\n      const { salespersonId } = req.params;\n      const callLogs = await CallLogModel.find({ salespersonId })\n        .populate(\"leadId\", \"name phone email\")\n        .sort({ createdAt: -1 });\n      res.json(callLogs);\n    } catch (error: any) {\n      console.error(\"Get salesperson call logs error:\", error);\n      res.status(500).json({ message: \"Failed to fetch call logs\" });\n    }\n  });\n\n  app.get(\"/api/call-logs/all\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const callLogs = await CallLogModel.find({})\n        .populate(\"leadId\", \"name phone email\")\n        .populate(\"salespersonId\", \"name email\")\n        .sort({ createdAt: -1 })\n        .limit(100);\n      res.json(callLogs);\n    } catch (error: any) {\n      console.error(\"Get all call logs error:\", error);\n      res.status(500).json({ message: \"Failed to fetch all call logs\" });\n    }\n  });\n\n  app.get(\"/api/missed-followups\", authenticateToken, async (req, res) => {\n    try {\n      const authReq = req as AuthRequest;\n      const today = new Date();\n      \n      // Find leads assigned to this salesperson with follow-up dates in the past\n      const missedFollowUps = await LeadModel.find({\n        assignedTo: authReq.user!._id,\n        followUpDate: { $lt: today },\n        status: { $nin: [\"Booked\", \"Lost\"] }, // Exclude completed or lost leads\n      })\n        .select(\"_id name phone email followUpDate status rating\")\n        .sort({ followUpDate: 1 })\n        .limit(50);\n\n      res.json(missedFollowUps);\n    } catch (error: any) {\n      console.error(\"Get missed follow-ups error:\", error);\n      res.status(500).json({ message: \"Failed to fetch missed follow-ups\" });\n    }\n  });\n\n  // ============= Activity Routes =============\n  app.get(\"/api/activities\", authenticateToken, async (req, res) => {\n    try {\n      const activities = await ActivityLogModel.find()\n        .sort({ createdAt: -1 })\n        .limit(20);\n      res.json(activities);\n    } catch (error: any) {\n      console.error(\"Get activities error:\", error);\n      res.status(500).json({ message: \"Failed to fetch activities\" });\n    }\n  });\n\n  // ============= Dashboard Routes =============\n  app.get(\"/api/dashboard/admin\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const today = new Date();\n      const startDate = startOfDay(today);\n      const endDate = endOfDay(today);\n\n      const [\n        totalLeads,\n        convertedLeads,\n        lostLeads,\n        unassignedLeads,\n        totalProjects,\n        totalPlots,\n        availablePlots,\n        bookedPlots,\n        payments,\n        todayFollowUps,\n      ] = await Promise.all([\n        LeadModel.countDocuments(),\n        LeadModel.countDocuments({ status: \"Booked\" }),\n        LeadModel.countDocuments({ status: \"Lost\" }),\n        LeadModel.countDocuments({ assignedTo: { $exists: false } }),\n        ProjectModel.countDocuments(),\n        PlotModel.countDocuments(),\n        PlotModel.countDocuments({ status: \"Available\" }),\n        PlotModel.countDocuments({ status: { $in: [\"Booked\", \"Sold\"] } }),\n        PaymentModel.find(),\n        LeadModel.countDocuments({\n          followUpDate: {\n            $gte: startDate,\n            $lte: endDate,\n          },\n        }),\n      ]);\n\n      const totalRevenue = payments.reduce((sum, p) => sum + p.amount, 0);\n\n      const stats: DashboardStats = {\n        totalLeads,\n        convertedLeads,\n        lostLeads,\n        unassignedLeads,\n        totalProjects,\n        totalPlots,\n        availablePlots,\n        bookedPlots,\n        totalRevenue,\n        todayFollowUps,\n      };\n\n      res.json(stats);\n    } catch (error: any) {\n      console.error(\"Get admin dashboard error:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/salesperson\", authenticateToken, async (req, res) => {\n    try {\n      const authReq = req as AuthRequest;\n      const today = new Date();\n      const startDate = startOfDay(today);\n      const endDate = endOfDay(today);\n\n      const [assignedLeads, todayFollowUps, convertedLeads, myLeads] = await Promise.all([\n        LeadModel.countDocuments({ assignedTo: authReq.user!._id }),\n        LeadModel.countDocuments({\n          assignedTo: authReq.user!._id,\n          followUpDate: {\n            $gte: startDate,\n            $lte: endDate,\n          },\n        }),\n        LeadModel.countDocuments({\n          assignedTo: authReq.user!._id,\n          status: \"Booked\",\n        }),\n        LeadModel.find({\n          assignedTo: authReq.user!._id,\n          status: \"Booked\",\n        }),\n      ]);\n\n      // Get payments for converted leads\n      const leadIds = myLeads.map((lead) => lead._id);\n      const payments = await PaymentModel.find({ leadId: { $in: leadIds } });\n      const totalRevenue = payments.reduce((sum, p) => sum + p.amount, 0);\n\n      const stats: SalespersonStats = {\n        assignedLeads,\n        todayFollowUps,\n        convertedLeads,\n        totalRevenue,\n      };\n\n      res.json(stats);\n    } catch (error: any) {\n      console.error(\"Get salesperson dashboard error:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/salesperson/detailed\", authenticateToken, async (req, res) => {\n    try {\n      const authReq = req as AuthRequest;\n      const now = new Date();\n      const dayStart = startOfDay(now);\n      const weekStart = startOfWeek(now, { weekStartsOn: 1 });\n      const monthStart = startOfMonth(now);\n\n      const [\n        leadsAssigned,\n        conversions,\n        approached,\n        contacted,\n        interested,\n        siteVisits,\n        lost,\n        dailyApproached,\n        dailyContacted,\n        dailyInterested,\n        dailyConversions,\n        weeklyApproached,\n        weeklyContacted,\n        weeklyInterested,\n        weeklyConversions,\n        monthlyApproached,\n        monthlyContacted,\n        monthlyInterested,\n        monthlyConversions,\n        revenue,\n      ] = await Promise.all([\n        LeadModel.countDocuments({ assignedTo: authReq.user!._id }),\n        LeadModel.countDocuments({ assignedTo: authReq.user!._id, status: \"Booked\" }),\n        LeadModel.countDocuments({ assignedTo: authReq.user!._id, status: \"New\" }),\n        LeadModel.countDocuments({ assignedTo: authReq.user!._id, status: \"Contacted\" }),\n        LeadModel.countDocuments({ assignedTo: authReq.user!._id, status: \"Interested\" }),\n        LeadModel.countDocuments({ assignedTo: authReq.user!._id, status: \"Site Visit\" }),\n        LeadModel.countDocuments({ assignedTo: authReq.user!._id, status: \"Lost\" }),\n        LeadModel.countDocuments({ assignedTo: authReq.user!._id, status: \"New\", createdAt: { $gte: dayStart, $lte: now } }),\n        LeadModel.countDocuments({ assignedTo: authReq.user!._id, status: \"Contacted\", updatedAt: { $gte: dayStart, $lte: now } }),\n        LeadModel.countDocuments({ assignedTo: authReq.user!._id, status: \"Interested\", updatedAt: { $gte: dayStart, $lte: now } }),\n        LeadModel.countDocuments({ assignedTo: authReq.user!._id, status: \"Booked\", updatedAt: { $gte: dayStart, $lte: now } }),\n        LeadModel.countDocuments({ assignedTo: authReq.user!._id, status: \"New\", createdAt: { $gte: weekStart, $lte: now } }),\n        LeadModel.countDocuments({ assignedTo: authReq.user!._id, status: \"Contacted\", updatedAt: { $gte: weekStart, $lte: now } }),\n        LeadModel.countDocuments({ assignedTo: authReq.user!._id, status: \"Interested\", updatedAt: { $gte: weekStart, $lte: now } }),\n        LeadModel.countDocuments({ assignedTo: authReq.user!._id, status: \"Booked\", updatedAt: { $gte: weekStart, $lte: now } }),\n        LeadModel.countDocuments({ assignedTo: authReq.user!._id, status: \"New\", createdAt: { $gte: monthStart, $lte: now } }),\n        LeadModel.countDocuments({ assignedTo: authReq.user!._id, status: \"Contacted\", updatedAt: { $gte: monthStart, $lte: now } }),\n        LeadModel.countDocuments({ assignedTo: authReq.user!._id, status: \"Interested\", updatedAt: { $gte: monthStart, $lte: now } }),\n        LeadModel.countDocuments({ assignedTo: authReq.user!._id, status: \"Booked\", updatedAt: { $gte: monthStart, $lte: now } }),\n        PaymentModel.aggregate([\n          {\n            $lookup: {\n              from: \"leads\",\n              localField: \"leadId\",\n              foreignField: \"_id\",\n              as: \"lead\",\n            },\n          },\n          { $unwind: \"$lead\" },\n          {\n            $match: {\n              \"lead.assignedTo\": authReq.user!._id,\n            },\n          },\n          { $group: { _id: null, total: { $sum: \"$amount\" } } },\n        ]).then(result => result[0]?.total || 0),\n      ]);\n\n      const conversionRate = leadsAssigned > 0 \n        ? ((conversions / leadsAssigned) * 100).toFixed(2) \n        : \"0.00\";\n\n      res.json({\n        leadsAssigned,\n        conversions,\n        conversionRate: parseFloat(conversionRate),\n        revenue,\n        approached,\n        contacted,\n        interested,\n        siteVisits,\n        lost,\n        dailyMetrics: {\n          approached: dailyApproached,\n          contacted: dailyContacted,\n          interested: dailyInterested,\n          conversions: dailyConversions,\n        },\n        weeklyMetrics: {\n          approached: weeklyApproached,\n          contacted: weeklyContacted,\n          interested: weeklyInterested,\n          conversions: weeklyConversions,\n        },\n        monthlyMetrics: {\n          approached: monthlyApproached,\n          contacted: monthlyContacted,\n          interested: monthlyInterested,\n          conversions: monthlyConversions,\n        },\n      });\n    } catch (error: any) {\n      console.error(\"Get salesperson detailed metrics error:\", error);\n      res.status(500).json({ message: \"Failed to fetch detailed metrics\" });\n    }\n  });\n\n  // Analytics Dashboard Endpoints\n  app.get(\"/api/analytics/overview\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const start = startDate ? new Date(startDate as string) : startOfMonth(new Date());\n      const end = endDate ? new Date(endDate as string) : endOfDay(new Date());\n\n      const [\n        totalLeads,\n        convertedLeads,\n        totalSalespersons,\n        totalRevenue,\n        buyerInterestsCount,\n        leadInterestsCount,\n        totalBookings,\n        avgResponseTime,\n      ] = await Promise.all([\n        LeadModel.countDocuments({ createdAt: { $gte: start, $lte: end } }),\n        LeadModel.countDocuments({ status: \"Booked\", createdAt: { $gte: start, $lte: end } }),\n        UserModel.countDocuments({ role: \"salesperson\" }),\n        PaymentModel.aggregate([\n          { $match: { createdAt: { $gte: start, $lte: end } } },\n          { $group: { _id: null, total: { $sum: \"$amount\" } } },\n        ]).then(result => result[0]?.total || 0),\n        BuyerInterestModel.countDocuments({ createdAt: { $gte: start, $lte: end } }),\n        LeadInterestModel.countDocuments({ createdAt: { $gte: start, $lte: end } }),\n        PaymentModel.countDocuments({ createdAt: { $gte: start, $lte: end } }),\n        LeadModel.aggregate([\n          { \n            $match: { \n              createdAt: { $gte: start, $lte: end },\n              firstContactDate: { $exists: true }\n            } \n          },\n          {\n            $project: {\n              responseTime: {\n                $divide: [\n                  { $subtract: [\"$firstContactDate\", \"$createdAt\"] },\n                  1000 * 60 * 60 // Convert to hours\n                ]\n              }\n            }\n          },\n          { $group: { _id: null, avgTime: { $avg: \"$responseTime\" } } }\n        ]).then(result => Math.round(result[0]?.avgTime || 0))\n      ]);\n\n      const totalBuyerInterests = buyerInterestsCount + leadInterestsCount;\n\n      const conversionRate = totalLeads > 0 ? ((convertedLeads / totalLeads) * 100).toFixed(2) : \"0.00\";\n\n      res.json({\n        totalLeads,\n        convertedLeads,\n        conversionRate,\n        totalSalespersons,\n        totalRevenue,\n        totalBuyerInterests,\n        totalBookings,\n        avgResponseTime,\n        activeLeads: totalLeads - convertedLeads,\n      });\n    } catch (error: any) {\n      console.error(\"Analytics overview error:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics overview\" });\n    }\n  });\n\n  app.get(\"/api/analytics/salesperson-performance\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const start = startDate ? new Date(startDate as string) : startOfMonth(new Date());\n      const end = endDate ? new Date(endDate as string) : endOfDay(new Date());\n\n      const now = new Date();\n      const dayStart = startOfDay(now);\n      const weekStart = startOfWeek(now, { weekStartsOn: 1 });\n      const monthStart = startOfMonth(now);\n\n      const salespersons = await UserModel.find({ role: \"salesperson\" });\n      \n      const performanceData = await Promise.all(\n        salespersons.map(async (salesperson) => {\n          const [\n            totalContacts,\n            leadsAssigned,\n            conversions,\n            buyerInterestsAdded,\n            lastActivity,\n            revenue,\n            approached,\n            contacted,\n            interested,\n            siteVisits,\n            lost,\n            dailyApproached,\n            dailyContacted,\n            dailyInterested,\n            dailyConversions,\n            weeklyApproached,\n            weeklyContacted,\n            weeklyInterested,\n            weeklyConversions,\n            monthlyApproached,\n            monthlyContacted,\n            monthlyInterested,\n            monthlyConversions,\n          ] = await Promise.all([\n            ActivityLogModel.countDocuments({\n              userId: salesperson._id,\n              createdAt: { $gte: start, $lte: end },\n            }),\n            LeadModel.countDocuments({\n              assignedTo: salesperson._id,\n              createdAt: { $gte: start, $lte: end },\n            }),\n            LeadModel.countDocuments({\n              assignedTo: salesperson._id,\n              status: \"Booked\",\n              updatedAt: { $gte: start, $lte: end },\n            }),\n            BuyerInterestModel.countDocuments({\n              salespersonId: salesperson._id,\n              createdAt: { $gte: start, $lte: end },\n            }),\n            ActivityLogModel.findOne({\n              userId: salesperson._id,\n            }).sort({ createdAt: -1 }),\n            PaymentModel.aggregate([\n              {\n                $lookup: {\n                  from: \"leads\",\n                  localField: \"leadId\",\n                  foreignField: \"_id\",\n                  as: \"lead\",\n                },\n              },\n              { $unwind: \"$lead\" },\n              {\n                $match: {\n                  \"lead.assignedTo\": salesperson._id,\n                  createdAt: { $gte: start, $lte: end },\n                },\n              },\n              { $group: { _id: null, total: { $sum: \"$amount\" } } },\n            ]).then(result => result[0]?.total || 0),\n            LeadModel.countDocuments({\n              assignedTo: salesperson._id,\n              status: \"New\",\n              createdAt: { $gte: start, $lte: end },\n            }),\n            LeadModel.countDocuments({\n              assignedTo: salesperson._id,\n              status: \"Contacted\",\n              updatedAt: { $gte: start, $lte: end },\n            }),\n            LeadModel.countDocuments({\n              assignedTo: salesperson._id,\n              status: \"Interested\",\n              updatedAt: { $gte: start, $lte: end },\n            }),\n            LeadModel.countDocuments({\n              assignedTo: salesperson._id,\n              status: \"Site Visit\",\n              updatedAt: { $gte: start, $lte: end },\n            }),\n            LeadModel.countDocuments({\n              assignedTo: salesperson._id,\n              status: \"Lost\",\n              updatedAt: { $gte: start, $lte: end },\n            }),\n            LeadModel.countDocuments({\n              assignedTo: salesperson._id,\n              status: \"New\",\n              createdAt: { $gte: dayStart, $lte: now },\n            }),\n            LeadModel.countDocuments({\n              assignedTo: salesperson._id,\n              status: \"Contacted\",\n              updatedAt: { $gte: dayStart, $lte: now },\n            }),\n            LeadModel.countDocuments({\n              assignedTo: salesperson._id,\n              status: \"Interested\",\n              updatedAt: { $gte: dayStart, $lte: now },\n            }),\n            LeadModel.countDocuments({\n              assignedTo: salesperson._id,\n              status: \"Booked\",\n              updatedAt: { $gte: dayStart, $lte: now },\n            }),\n            LeadModel.countDocuments({\n              assignedTo: salesperson._id,\n              status: \"New\",\n              createdAt: { $gte: weekStart, $lte: now },\n            }),\n            LeadModel.countDocuments({\n              assignedTo: salesperson._id,\n              status: \"Contacted\",\n              updatedAt: { $gte: weekStart, $lte: now },\n            }),\n            LeadModel.countDocuments({\n              assignedTo: salesperson._id,\n              status: \"Interested\",\n              updatedAt: { $gte: weekStart, $lte: now },\n            }),\n            LeadModel.countDocuments({\n              assignedTo: salesperson._id,\n              status: \"Booked\",\n              updatedAt: { $gte: weekStart, $lte: now },\n            }),\n            LeadModel.countDocuments({\n              assignedTo: salesperson._id,\n              status: \"New\",\n              createdAt: { $gte: monthStart, $lte: now },\n            }),\n            LeadModel.countDocuments({\n              assignedTo: salesperson._id,\n              status: \"Contacted\",\n              updatedAt: { $gte: monthStart, $lte: now },\n            }),\n            LeadModel.countDocuments({\n              assignedTo: salesperson._id,\n              status: \"Interested\",\n              updatedAt: { $gte: monthStart, $lte: now },\n            }),\n            LeadModel.countDocuments({\n              assignedTo: salesperson._id,\n              status: \"Booked\",\n              updatedAt: { $gte: monthStart, $lte: now },\n            }),\n          ]);\n\n          const conversionRate = leadsAssigned > 0 \n            ? ((conversions / leadsAssigned) * 100).toFixed(2) \n            : \"0.00\";\n\n          return {\n            id: String(salesperson._id),\n            name: salesperson.name,\n            email: salesperson.email,\n            totalContacts,\n            leadsAssigned,\n            conversions,\n            conversionRate: parseFloat(conversionRate),\n            buyerInterestsAdded,\n            revenue,\n            lastActivity: lastActivity?.createdAt || null,\n            lastActivityDetails: lastActivity?.details || \"No activity\",\n            approached,\n            contacted,\n            interested,\n            siteVisits,\n            lost,\n            dailyMetrics: {\n              approached: dailyApproached,\n              contacted: dailyContacted,\n              interested: dailyInterested,\n              conversions: dailyConversions,\n            },\n            weeklyMetrics: {\n              approached: weeklyApproached,\n              contacted: weeklyContacted,\n              interested: weeklyInterested,\n              conversions: weeklyConversions,\n            },\n            monthlyMetrics: {\n              approached: monthlyApproached,\n              contacted: monthlyContacted,\n              interested: monthlyInterested,\n              conversions: monthlyConversions,\n            },\n          };\n        })\n      );\n\n      // Sort by conversion rate and revenue\n      performanceData.sort((a, b) => b.revenue - a.revenue || b.conversionRate - a.conversionRate);\n\n      res.json(performanceData);\n    } catch (error: any) {\n      console.error(\"Salesperson performance error:\", error);\n      res.status(500).json({ message: \"Failed to fetch salesperson performance\" });\n    }\n  });\n\n  app.get(\"/api/analytics/daily-metrics\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const { days = 30 } = req.query;\n      const numDays = parseInt(days as string);\n      const endDate = endOfDay(new Date());\n      const startDate = startOfDay(new Date(endDate.getTime() - (numDays * 24 * 60 * 60 * 1000)));\n\n      const dailyData = [];\n      \n      for (let i = 0; i < numDays; i++) {\n        const dayStart = new Date(startDate.getTime() + (i * 24 * 60 * 60 * 1000));\n        const dayEnd = new Date(dayStart.getTime() + (24 * 60 * 60 * 1000) - 1);\n\n        const [leadsCreated, conversions, buyerInterestsCount, leadInterestsCount, bookings] = await Promise.all([\n          LeadModel.countDocuments({ createdAt: { $gte: dayStart, $lte: dayEnd } }),\n          LeadModel.countDocuments({ \n            status: \"Booked\", \n            updatedAt: { $gte: dayStart, $lte: dayEnd } \n          }),\n          BuyerInterestModel.countDocuments({ createdAt: { $gte: dayStart, $lte: dayEnd } }),\n          LeadInterestModel.countDocuments({ createdAt: { $gte: dayStart, $lte: dayEnd } }),\n          PaymentModel.countDocuments({ createdAt: { $gte: dayStart, $lte: dayEnd } }),\n        ]);\n\n        const buyerInterests = buyerInterestsCount + leadInterestsCount;\n\n        dailyData.push({\n          date: dayStart.toISOString().split('T')[0],\n          leadsCreated,\n          conversions,\n          buyerInterests,\n          bookings,\n        });\n      }\n\n      res.json(dailyData);\n    } catch (error: any) {\n      console.error(\"Daily metrics error:\", error);\n      res.status(500).json({ message: \"Failed to fetch daily metrics\" });\n    }\n  });\n\n  app.get(\"/api/analytics/monthly-metrics\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const { months = 12 } = req.query;\n      const numMonths = parseInt(months as string);\n      const monthlyData = [];\n\n      for (let i = numMonths - 1; i >= 0; i--) {\n        const date = new Date();\n        date.setMonth(date.getMonth() - i);\n        const monthStart = startOfMonth(date);\n        const monthEnd = endOfMonth(date);\n\n        const [leadsCreated, conversions, revenue] = await Promise.all([\n          LeadModel.countDocuments({ createdAt: { $gte: monthStart, $lte: monthEnd } }),\n          LeadModel.countDocuments({ \n            status: \"Booked\", \n            updatedAt: { $gte: monthStart, $lte: monthEnd } \n          }),\n          PaymentModel.aggregate([\n            { $match: { createdAt: { $gte: monthStart, $lte: monthEnd } } },\n            { $group: { _id: null, total: { $sum: \"$amount\" } } },\n          ]).then(result => result[0]?.total || 0),\n        ]);\n\n        monthlyData.push({\n          month: format(monthStart, 'MMM yyyy'),\n          leadsCreated,\n          conversions,\n          revenue,\n        });\n      }\n\n      res.json(monthlyData);\n    } catch (error: any) {\n      console.error(\"Monthly metrics error:\", error);\n      res.status(500).json({ message: \"Failed to fetch monthly metrics\" });\n    }\n  });\n\n  app.get(\"/api/analytics/activity-timeline\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const { limit = 50, salespersonId } = req.query;\n      \n      const query: any = {};\n      if (salespersonId) {\n        query.userId = salespersonId;\n      }\n\n      const activities = await ActivityLogModel.find(query)\n        .sort({ createdAt: -1 })\n        .limit(parseInt(limit as string))\n        .populate(\"userId\", \"name email\");\n\n      const formattedActivities = activities.map(activity => ({\n        id: String(activity._id),\n        userName: activity.userName,\n        action: activity.action,\n        entityType: activity.entityType,\n        details: activity.details,\n        createdAt: activity.createdAt,\n        userDetails: (activity.userId as any)?.name || activity.userName,\n      }));\n\n      res.json(formattedActivities);\n    } catch (error: any) {\n      console.error(\"Activity timeline error:\", error);\n      res.status(500).json({ message: \"Failed to fetch activity timeline\" });\n    }\n  });\n\n  app.get(\"/api/analytics/lead-source-analysis\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const start = startDate ? new Date(startDate as string) : startOfMonth(new Date());\n      const end = endDate ? new Date(endDate as string) : endOfDay(new Date());\n\n      const leadSourceData = await LeadModel.aggregate([\n        { $match: { createdAt: { $gte: start, $lte: end } } },\n        { \n          $group: { \n            _id: \"$source\", \n            count: { $sum: 1 },\n            conversions: {\n              $sum: { $cond: [{ $eq: [\"$status\", \"Booked\"] }, 1, 0] }\n            }\n          } \n        },\n        { $sort: { count: -1 } },\n      ]);\n\n      const formattedData = leadSourceData.map(item => ({\n        source: item._id,\n        totalLeads: item.count,\n        conversions: item.conversions,\n        conversionRate: item.count > 0 \n          ? ((item.conversions / item.count) * 100).toFixed(2) \n          : \"0.00\",\n      }));\n\n      res.json(formattedData);\n    } catch (error: any) {\n      console.error(\"Lead source analysis error:\", error);\n      res.status(500).json({ message: \"Failed to fetch lead source analysis\" });\n    }\n  });\n\n  app.get(\"/api/analytics/plot-category-performance\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const plotData = await PlotModel.aggregate([\n        { \n          $group: { \n            _id: \"$category\", \n            total: { $sum: 1 },\n            available: {\n              $sum: { $cond: [{ $eq: [\"$status\", \"Available\"] }, 1, 0] }\n            },\n            booked: {\n              $sum: { $cond: [{ $eq: [\"$status\", \"Booked\"] }, 1, 0] }\n            },\n            sold: {\n              $sum: { $cond: [{ $eq: [\"$status\", \"Sold\"] }, 1, 0] }\n            },\n            avgPrice: { $avg: \"$price\" }\n          } \n        },\n        { $sort: { total: -1 } },\n      ]);\n\n      const formattedData = plotData.map(item => ({\n        category: item._id,\n        totalPlots: item.total,\n        available: item.available,\n        booked: item.booked,\n        sold: item.sold,\n        avgPrice: Math.round(item.avgPrice),\n        occupancyRate: ((item.booked + item.sold) / item.total * 100).toFixed(2),\n      }));\n\n      res.json(formattedData);\n    } catch (error: any) {\n      console.error(\"Plot category performance error:\", error);\n      res.status(500).json({ message: \"Failed to fetch plot category performance\" });\n    }\n  });\n\n  app.get(\"/api/analytics/customer-contacts/:salespersonId\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const { salespersonId } = req.params;\n      \n      const leads = await LeadModel.find({ assignedTo: salespersonId })\n        .populate(\"assignedTo\", \"name email\")\n        .sort({ updatedAt: -1 });\n\n      const formattedContacts = leads.map(lead => ({\n        id: String(lead._id),\n        name: lead.name,\n        email: lead.email || \"\",\n        phone: lead.phone,\n        status: lead.status,\n        rating: lead.rating,\n        source: lead.source,\n        contactedDate: lead.createdAt.toISOString(),\n        lastContactDate: lead.updatedAt.toISOString(),\n        salespersonName: (lead.assignedTo as any)?.name || \"\",\n        salespersonEmail: (lead.assignedTo as any)?.email || \"\",\n        notes: lead.notes,\n        followUpDate: lead.followUpDate ? lead.followUpDate.toISOString() : undefined,\n      }));\n\n      res.json(formattedContacts);\n    } catch (error: any) {\n      console.error(\"Customer contacts error:\", error);\n      res.status(500).json({ message: \"Failed to fetch customer contacts\" });\n    }\n  });\n}\n","size_bytes":68543},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/lib/csv-export.ts":{"content":"export function exportToCSV(data: any[], filename: string) {\n  if (!data || data.length === 0) {\n    alert(\"No data to export\");\n    return;\n  }\n\n  const headers = Object.keys(data[0]);\n  const csvContent = [\n    headers.join(\",\"),\n    ...data.map(row => \n      headers.map(header => {\n        const value = row[header];\n        if (value === null || value === undefined) return \"\";\n        const stringValue = String(value);\n        if (stringValue.includes(\",\") || stringValue.includes('\"') || stringValue.includes(\"\\n\")) {\n          return `\"${stringValue.replace(/\"/g, '\"\"')}\"`;\n        }\n        return stringValue;\n      }).join(\",\")\n    )\n  ].join(\"\\n\");\n\n  const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\n  const link = document.createElement(\"a\");\n  const url = URL.createObjectURL(blob);\n  \n  link.setAttribute(\"href\", url);\n  link.setAttribute(\"download\", `${filename}.csv`);\n  link.style.visibility = \"hidden\";\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}\n\nexport function exportToExcel(data: any[], filename: string) {\n  if (!data || data.length === 0) {\n    alert(\"No data to export\");\n    return;\n  }\n\n  const headers = Object.keys(data[0]);\n  \n  const table = `\n    <html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns=\"http://www.w3.org/TR/REC-html40\">\n      <head>\n        <meta charset=\"utf-8\">\n        <!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>Sheet1</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]-->\n      </head>\n      <body>\n        <table>\n          <thead>\n            <tr>\n              ${headers.map(h => `<th>${h}</th>`).join(\"\")}\n            </tr>\n          </thead>\n          <tbody>\n            ${data.map(row => `\n              <tr>\n                ${headers.map(h => `<td>${row[h] ?? \"\"}</td>`).join(\"\")}\n              </tr>\n            `).join(\"\")}\n          </tbody>\n        </table>\n      </body>\n    </html>\n  `;\n\n  const blob = new Blob([table], { type: \"application/vnd.ms-excel\" });\n  const link = document.createElement(\"a\");\n  const url = URL.createObjectURL(blob);\n  \n  link.setAttribute(\"href\", url);\n  link.setAttribute(\"download\", `${filename}.xls`);\n  link.style.visibility = \"hidden\";\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}\n","size_bytes":2488},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n        xl: \"0.75rem\", /* 12px for cards */\n      },\n      backdropBlur: {\n        xs: '2px',\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4144},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const token = localStorage.getItem(\"token\");\n  const headers: Record<string, string> = {};\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  \n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n  \n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem(\"token\");\n    const headers: Record<string, string> = {};\n    \n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n    \n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1767},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/lib/theme.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const saved = localStorage.getItem(\"theme\");\n    return (saved as Theme) || \"light\";\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    if (theme === \"dark\") {\n      root.classList.add(\"dark\");\n    } else {\n      root.classList.remove(\"dark\");\n    }\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme((prev) => (prev === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1132},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/pages/login.tsx":{"content":"import { useLocation } from \"wouter\";\nimport backgroundImage from \"@assets/generated_images/Real_estate_plots_buildings_aerial_f9df5abc.png\";\n\nimport { Building2, Loader2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { AuthResponse, LoginCredentials } from \"@shared/schema\";\nimport { loginSchema } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useEffect } from \"react\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { login } = useAuth();\n  const { toast } = useToast();\n\n  // Clear any old tokens when the login page loads\n  useEffect(() => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n  }, []);\n\n  const form = useForm<LoginCredentials>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const handleSubmit = async (data: LoginCredentials) => {\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      const authData: AuthResponse = await response.json();\n\n      login(authData);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have successfully logged in.\",\n      });\n      \n      // Use window.location for reliable redirect\n      window.location.href = \"/\";\n    } catch (error: any) {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid email or password\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div \n      className=\"min-h-screen flex items-center justify-center p-4 relative\"\n      style={{\n        backgroundImage: `url(${backgroundImage})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat'\n      }}\n    >\n      <div className=\"absolute inset-0 bg-black/40 backdrop-blur-sm\"></div>\n      <div\n        className=\"w-full max-w-md relative z-10\"\n      >\n        <div className=\"text-center mb-8\">\n          <div\n            className=\"inline-flex h-16 w-16 items-center justify-center rounded-2xl bg-gradient-to-br from-primary to-accent mb-4 shadow-lg\"\n          >\n            <Building2 className=\"h-8 w-8 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-white dark:text-white\">Plot Management CRM</h1>\n          <p className=\"text-white/90 dark:text-white/90 mt-2\">Sign in to manage your leads and plots</p>\n        </div>\n\n        <Card className=\"backdrop-blur-lg bg-card/80 border-card-border shadow-xl\">\n          <CardHeader>\n            <CardTitle>Sign In</CardTitle>\n            <CardDescription>Enter your credentials to access your account</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"email\"\n                          placeholder=\"admin@example.com\"\n                          {...field}\n                          data-testid=\"input-email\"\n                          disabled={form.formState.isSubmitting}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"password\"\n                          placeholder=\"••••••••\"\n                          {...field}\n                          data-testid=\"input-password\"\n                          disabled={form.formState.isSubmitting}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={form.formState.isSubmitting}\n                  data-testid=\"button-login\"\n                >\n                  {form.formState.isSubmitting ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Signing in...\n                    </>\n                  ) : (\n                    \"Sign In\"\n                  )}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        <p className=\"text-center text-sm text-white/80 dark:text-white/80 mt-6 bg-black/20 backdrop-blur-sm py-2 px-4 rounded-lg\">\n          Demo: admin@example.com / password123\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5587},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"server/models.ts":{"content":"import mongoose, { Schema, Document } from \"mongoose\";\nimport type {\n  User,\n  Lead,\n  LeadInterest,\n  Project,\n  Plot,\n  Payment,\n  ActivityLog,\n  BuyerInterest,\n  CallLog,\n  UserRole,\n  LeadStatus,\n  LeadRating,\n  LeadSource,\n  LeadClassification,\n  PlotStatus,\n  PlotCategory,\n  PaymentMode,\n  BookingType,\n  CallStatus,\n} from \"@shared/schema\";\n\n// User Model\ninterface IUser extends Omit<User, \"_id\">, Document {}\n\nconst userSchema = new Schema<IUser>(\n  {\n    name: { type: String, required: true },\n    email: { type: String, required: true, unique: true },\n    password: { type: String, required: true },\n    role: {\n      type: String,\n      enum: [\"admin\", \"salesperson\"],\n      required: true,\n    },\n    phone: String,\n  },\n  { timestamps: true }\n);\n\nexport const UserModel = mongoose.model<IUser>(\"User\", userSchema);\n\n// Lead Model\ninterface ILead extends Omit<Lead, \"_id\">, Document {}\n\nconst leadSchema = new Schema<ILead>(\n  {\n    name: { type: String, required: true },\n    email: String,\n    phone: { type: String, required: true },\n    source: {\n      type: String,\n      enum: [\"Website\", \"Facebook\", \"Google Ads\", \"Referral\", \"Walk-in\", \"Other\"],\n      required: true,\n    },\n    status: {\n      type: String,\n      enum: [\"New\", \"Contacted\", \"Interested\", \"Site Visit\", \"Booked\", \"Lost\"],\n      default: \"New\",\n    },\n    rating: {\n      type: String,\n      enum: [\"Urgent\", \"High\", \"Low\"],\n      default: \"High\",\n    },\n    classification: {\n      type: String,\n      enum: [\"Important\", \"Inquiry\"],\n    },\n    assignedTo: { type: Schema.Types.ObjectId, ref: \"User\" },\n    assignedBy: { type: Schema.Types.ObjectId, ref: \"User\" },\n    followUpDate: Date,\n    notes: String,\n    projectId: { type: Schema.Types.ObjectId, ref: \"Project\" },\n    plotIds: [{ type: Schema.Types.ObjectId, ref: \"Plot\" }],\n    highestOffer: Number,\n  },\n  { timestamps: true }\n);\n\nexport const LeadModel = mongoose.model<ILead>(\"Lead\", leadSchema);\n\n// Project Model\ninterface IProject extends Omit<Project, \"_id\">, Document {}\n\nconst projectSchema = new Schema<IProject>(\n  {\n    name: { type: String, required: true },\n    location: { type: String, required: true },\n    totalPlots: { type: Number, required: true },\n    description: String,\n  },\n  { timestamps: true }\n);\n\nexport const ProjectModel = mongoose.model<IProject>(\"Project\", projectSchema);\n\n// Plot Model\ninterface IPlot extends Omit<Plot, \"_id\">, Document {}\n\nconst plotSchema = new Schema<IPlot>(\n  {\n    projectId: { type: Schema.Types.ObjectId, ref: \"Project\", required: true },\n    plotNumber: { type: String, required: true },\n    size: { type: String, required: true },\n    price: { type: Number, required: true },\n    facing: String,\n    status: {\n      type: String,\n      enum: [\"Available\", \"Booked\", \"Hold\", \"Sold\"],\n      default: \"Available\",\n    },\n    category: {\n      type: String,\n      enum: [\"Investment Plot\", \"Bungalow Plot\", \"Residential Plot\", \"Commercial Plot\", \"Open Plot\"],\n      required: true,\n    },\n    amenities: String,\n    bookedBy: { type: Schema.Types.ObjectId, ref: \"Lead\" },\n  },\n  { timestamps: true }\n);\n\nexport const PlotModel = mongoose.model<IPlot>(\"Plot\", plotSchema);\n\n// Payment Model\ninterface IPayment extends Omit<Payment, \"_id\">, Document {}\n\nconst paymentSchema = new Schema<IPayment>(\n  {\n    leadId: { type: Schema.Types.ObjectId, ref: \"Lead\", required: true },\n    plotId: { type: Schema.Types.ObjectId, ref: \"Plot\", required: true },\n    amount: { type: Number, required: true },\n    mode: {\n      type: String,\n      enum: [\"Cash\", \"UPI\", \"Cheque\", \"Bank Transfer\"],\n      required: true,\n    },\n    bookingType: {\n      type: String,\n      enum: [\"Token\", \"Full\"],\n      required: true,\n    },\n    transactionId: String,\n    notes: String,\n  },\n  { timestamps: true }\n);\n\nexport const PaymentModel = mongoose.model<IPayment>(\"Payment\", paymentSchema);\n\n// Activity Log Model\ninterface IActivityLog extends Omit<ActivityLog, \"_id\">, Document {}\n\nconst activityLogSchema = new Schema<IActivityLog>(\n  {\n    userId: { type: Schema.Types.ObjectId, ref: \"User\", required: true },\n    userName: { type: String, required: true },\n    action: { type: String, required: true },\n    entityType: {\n      type: String,\n      enum: [\"lead\", \"plot\", \"payment\", \"user\"],\n      required: true,\n    },\n    entityId: { type: Schema.Types.ObjectId, required: true },\n    details: { type: String, required: true },\n  },\n  { timestamps: true }\n);\n\nexport const ActivityLogModel = mongoose.model<IActivityLog>(\n  \"ActivityLog\",\n  activityLogSchema\n);\n\n// Buyer Interest Model\ninterface IBuyerInterest extends Omit<BuyerInterest, \"_id\">, Document {}\n\nconst buyerInterestSchema = new Schema<IBuyerInterest>(\n  {\n    plotId: { type: Schema.Types.ObjectId, ref: \"Plot\", required: true },\n    buyerName: { type: String, required: true },\n    buyerContact: { type: String, required: true },\n    buyerEmail: String,\n    offeredPrice: { type: Number, required: true },\n    salespersonId: { type: Schema.Types.ObjectId, ref: \"User\", required: true },\n    salespersonName: { type: String, required: true },\n    notes: String,\n  },\n  { timestamps: true }\n);\n\nexport const BuyerInterestModel = mongoose.model<IBuyerInterest>(\n  \"BuyerInterest\",\n  buyerInterestSchema\n);\n\n// Lead Interest Model\ninterface ILeadInterest extends Omit<LeadInterest, \"_id\">, Document {}\n\nconst leadInterestSchema = new Schema<ILeadInterest>(\n  {\n    leadId: { type: Schema.Types.ObjectId, ref: \"Lead\", required: true },\n    projectId: { type: Schema.Types.ObjectId, ref: \"Project\", required: true },\n    plotIds: [{ type: Schema.Types.ObjectId, ref: \"Plot\" }],\n    highestOffer: { type: Number, required: true },\n    notes: String,\n  },\n  { timestamps: true }\n);\n\nexport const LeadInterestModel = mongoose.model<ILeadInterest>(\n  \"LeadInterest\",\n  leadInterestSchema\n);\n\n// Call Log Model\ninterface ICallLog extends Omit<CallLog, \"_id\">, Document {}\n\nconst callLogSchema = new Schema<ICallLog>(\n  {\n    leadId: { type: Schema.Types.ObjectId, ref: \"Lead\", required: true },\n    salespersonId: { type: Schema.Types.ObjectId, ref: \"User\", required: true },\n    salespersonName: { type: String, required: true },\n    callStatus: {\n      type: String,\n      enum: [\"Called - No Answer\", \"Called - Answered\", \"Follow Up Scheduled\", \"Not Interested\", \"Interested\", \"Meeting Scheduled\"],\n      required: true,\n    },\n    callDuration: Number,\n    notes: String,\n    nextFollowUpDate: Date,\n  },\n  { timestamps: true }\n);\n\nexport const CallLogModel = mongoose.model<ICallLog>(\"CallLog\", callLogSchema);\n","size_bytes":6562},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/pages/salespersons.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\n\nimport { Plus, Search, Edit, Trash2, Mail, Phone } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { User, InsertUser } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUserSchema, updateUserSchema } from \"@shared/schema\";\nimport type { UpdateUser } from \"@shared/schema\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\n\nexport default function Salespersons() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [selectedSalesperson, setSelectedSalesperson] = useState<User | null>(null);\n  const { toast } = useToast();\n\n  const { data: salespersons, isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users/salespersons\"],\n  });\n\n  const form = useForm<InsertUser>({\n    resolver: zodResolver(insertUserSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      role: \"salesperson\",\n      phone: \"\",\n    },\n  });\n\n  const editForm = useForm<UpdateUser>({\n    resolver: zodResolver(updateUserSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      role: \"salesperson\",\n      phone: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertUser) => apiRequest(\"POST\", \"/api/users\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/salespersons\"] });\n      toast({ title: \"Salesperson created successfully\" });\n      setIsAddDialogOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: UpdateUser }) =>\n      apiRequest(\"PATCH\", `/api/users/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/salespersons\"] });\n      toast({ title: \"Salesperson updated successfully\" });\n      setIsEditDialogOpen(false);\n      setSelectedSalesperson(null);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/users/${id}`, {}),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/salespersons\"] });\n      toast({ title: \"Salesperson deleted successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const filteredSalespersons = salespersons?.filter((sp) =>\n    sp.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    sp.email.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleSubmit = (data: InsertUser) => {\n    createMutation.mutate(data);\n  };\n\n  const handleEdit = (salesperson: User) => {\n    setSelectedSalesperson(salesperson);\n    editForm.reset({\n      name: salesperson.name,\n      email: salesperson.email,\n      password: \"\",\n      role: \"salesperson\",\n      phone: salesperson.phone || \"\",\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleUpdate = (data: UpdateUser) => {\n    if (selectedSalesperson) {\n      updateMutation.mutate({ id: selectedSalesperson._id, data });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div\n        className=\"flex flex-wrap items-center justify-between gap-4\"\n      >\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Salespersons</h1>\n          <p className=\"text-muted-foreground mt-1\">Manage your sales team</p>\n        </div>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-salesperson\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Salesperson\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Add New Salesperson</DialogTitle>\n              <DialogDescription>Create a new salesperson account</DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"John Doe\" {...field} data-testid=\"input-salesperson-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" placeholder=\"john@example.com\" {...field} data-testid=\"input-salesperson-email\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone (Optional)</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"9876543210\" {...field} data-testid=\"input-salesperson-phone\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"••••••••\" {...field} data-testid=\"input-salesperson-password\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsAddDialogOpen(false)}\n                    data-testid=\"button-cancel-salesperson\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createMutation.isPending} data-testid=\"button-submit-salesperson\">\n                    {createMutation.isPending ? \"Creating...\" : \"Create\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Dialog */}\n        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Edit Salesperson</DialogTitle>\n              <DialogDescription>Update salesperson details and password</DialogDescription>\n            </DialogHeader>\n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit(handleUpdate)} className=\"space-y-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"John Doe\" {...field} data-testid=\"input-edit-salesperson-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" placeholder=\"john@example.com\" {...field} data-testid=\"input-edit-salesperson-email\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone (Optional)</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"9876543210\" {...field} data-testid=\"input-edit-salesperson-phone\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password (Leave blank to keep current)</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"••••••••\" {...field} data-testid=\"input-edit-salesperson-password\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsEditDialogOpen(false)}\n                    data-testid=\"button-cancel-edit-salesperson\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={updateMutation.isPending} data-testid=\"button-submit-edit-salesperson\">\n                    {updateMutation.isPending ? \"Updating...\" : \"Update\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n        <Input\n          placeholder=\"Search salespersons...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          className=\"pl-9 max-w-md\"\n          data-testid=\"input-search-salespersons\"\n        />\n      </div>\n\n      {isLoading ? (\n        <div className=\"flex justify-center py-12\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n        </div>\n      ) : filteredSalespersons && filteredSalespersons.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredSalespersons.map((salesperson, index) => (\n            <div\n              key={salesperson._id}\n            >\n              <Card className=\"hover-elevate cursor-pointer\" data-testid={`card-salesperson-${salesperson._id}`} onClick={() => handleEdit(salesperson)}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"flex h-12 w-12 items-center justify-center rounded-full bg-primary text-primary-foreground font-semibold\">\n                        {salesperson.name.charAt(0).toUpperCase()}\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-lg\">{salesperson.name}</CardTitle>\n                        <Badge variant=\"secondary\" className=\"mt-1\">Salesperson</Badge>\n                      </div>\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      variant=\"destructive\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        deleteMutation.mutate(salesperson._id);\n                      }}\n                      disabled={deleteMutation.isPending}\n                      data-testid={`button-delete-${salesperson._id}`}\n                    >\n                      <Trash2 className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <Mail className=\"h-4 w-4\" />\n                    <span className=\"truncate\">{salesperson.email}</span>\n                  </div>\n                  {salesperson.phone && (\n                    <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                      <Phone className=\"h-4 w-4\" />\n                      <span>{salesperson.phone}</span>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          ))}\n        </div>\n      ) : (\n        <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n          <Search className=\"h-12 w-12 text-muted-foreground/50 mb-3\" />\n          <p className=\"text-lg font-medium text-foreground\">No salespersons found</p>\n          <p className=\"text-sm text-muted-foreground mt-1\">Add a new salesperson to get started</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":14585},"server/db.ts":{"content":"import mongoose from \"mongoose\";\n\nconst MONGODB_URI = process.env.MONGODB_URI;\n\nif (!MONGODB_URI) {\n  throw new Error(\"MONGODB_URI environment variable is not defined\");\n}\n\nlet isConnected = false;\n\nexport async function connectDB() {\n  if (isConnected) {\n    return;\n  }\n\n  if (!MONGODB_URI) {\n    throw new Error(\"MONGODB_URI environment variable is not defined\");\n  }\n\n  try {\n    await mongoose.connect(MONGODB_URI);\n    isConnected = true;\n    console.log(\"MongoDB connected successfully\");\n  } catch (error) {\n    console.error(\"MongoDB connection error:\", error);\n    throw error;\n  }\n}\n\nexport default mongoose;\n","size_bytes":620},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/pages/not-found.tsx":{"content":"import { useLocation } from \"wouter\";\n\nimport { Home, AlertCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function NotFound() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 via-background to-accent/5 p-4\">\n      <div\n        className=\"text-center space-y-6\"\n      >\n        <div\n          className=\"inline-flex h-24 w-24 items-center justify-center rounded-full bg-destructive/10\"\n        >\n          <AlertCircle className=\"h-12 w-12 text-destructive\" />\n        </div>\n        \n        <div>\n          <h1 className=\"text-6xl font-bold text-foreground mb-2\">404</h1>\n          <h2 className=\"text-2xl font-semibold text-foreground mb-2\">Page Not Found</h2>\n          <p className=\"text-muted-foreground max-w-md mx-auto\">\n            The page you're looking for doesn't exist or has been moved.\n          </p>\n        </div>\n\n        <Button onClick={() => setLocation(\"/dashboard\")} data-testid=\"button-go-home\">\n          <Home className=\"h-4 w-4 mr-2\" />\n          Go to Dashboard\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1192},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"server/seed.ts":{"content":"import bcrypt from \"bcryptjs\";\nimport { UserModel, LeadModel, ProjectModel, PlotModel, LeadInterestModel, BuyerInterestModel } from \"./models\";\n\nexport async function seedDatabase() {\n  try {\n    console.log(\"Seeding database with initial data...\");\n\n    // Clear existing data\n    await BuyerInterestModel.deleteMany({});\n    await LeadInterestModel.deleteMany({});\n    await LeadModel.deleteMany({});\n    await PlotModel.deleteMany({});\n    await ProjectModel.deleteMany({});\n    await UserModel.deleteMany({ role: \"salesperson\" });\n    \n    // Create or get admin user\n    const hashedPassword = await bcrypt.hash(\"password123\", 10);\n    const adminExists = await UserModel.findOne({ email: \"admin@example.com\" });\n    \n    let admin;\n    if (!adminExists) {\n      admin = await UserModel.create({\n        name: \"Admin User\",\n        email: \"admin@example.com\",\n        password: hashedPassword,\n        role: \"admin\",\n        phone: \"9876543210\",\n      });\n    } else {\n      admin = adminExists;\n    }\n\n    // Create 4 salespersons\n    const salesperson1 = await UserModel.create({\n      name: \"Rahul Sharma\",\n      email: \"rahul@example.com\",\n      password: hashedPassword,\n      role: \"salesperson\",\n      phone: \"9876543211\",\n    });\n\n    const salesperson2 = await UserModel.create({\n      name: \"Priya Patel\",\n      email: \"priya@example.com\",\n      password: hashedPassword,\n      role: \"salesperson\",\n      phone: \"9876543212\",\n    });\n\n    const salesperson3 = await UserModel.create({\n      name: \"Amit Singh\",\n      email: \"amit@example.com\",\n      password: hashedPassword,\n      role: \"salesperson\",\n      phone: \"9876543213\",\n    });\n\n    const salesperson4 = await UserModel.create({\n      name: \"Neha Desai\",\n      email: \"neha@example.com\",\n      password: hashedPassword,\n      role: \"salesperson\",\n      phone: \"9876543214\",\n    });\n\n    // Create 2 projects\n    const project1 = await ProjectModel.create({\n      name: \"Green Valley Residency\",\n      location: \"Pune, Maharashtra\",\n      totalPlots: 5,\n      description: \"Premium residential plots with modern amenities\",\n    });\n\n    const project2 = await ProjectModel.create({\n      name: \"Sunrise Heights\",\n      location: \"Mumbai, Maharashtra\",\n      totalPlots: 5,\n      description: \"Luxury plots with scenic views\",\n    });\n\n    // Create 5 plots for Project 1\n    const project1Plots = [];\n    const categories = [\"Investment Plot\", \"Bungalow Plot\", \"Residential Plot\", \"Commercial Plot\", \"Open Plot\"];\n    const facings = [\"East\", \"West\", \"North\", \"South\"];\n    \n    for (let i = 1; i <= 5; i++) {\n      project1Plots.push({\n        projectId: project1._id,\n        plotNumber: `GV-${i.toString().padStart(2, \"0\")}`,\n        size: `${1200 + i * 100} sq.ft`,\n        price: 2500000 + i * 150000,\n        facing: facings[i % facings.length],\n        status: \"Available\",\n        category: categories[i % categories.length],\n        amenities: \"Water supply, Electricity, Road access, Park\",\n      });\n    }\n    const p1Plots = await PlotModel.insertMany(project1Plots);\n\n    // Create 5 plots for Project 2\n    const project2Plots = [];\n    for (let i = 1; i <= 5; i++) {\n      project2Plots.push({\n        projectId: project2._id,\n        plotNumber: `SH-${i.toString().padStart(2, \"0\")}`,\n        size: `${1500 + i * 100} sq.ft`,\n        price: 3000000 + i * 200000,\n        facing: facings[i % facings.length],\n        status: \"Available\",\n        category: categories[i % categories.length],\n        amenities: \"Water supply, Electricity, Road access, Gym, Pool\",\n      });\n    }\n    const p2Plots = await PlotModel.insertMany(project2Plots);\n\n    // Create 4 leads with names Abhijeet, Aniket, Sairaj, Pratik\n    // Set October 2025 dates for analytics\n    const oct5 = new Date(\"2025-10-05T10:00:00\");\n    const oct10 = new Date(\"2025-10-10T14:30:00\");\n    const oct15 = new Date(\"2025-10-15T11:15:00\");\n    const oct20 = new Date(\"2025-10-20T16:45:00\");\n    \n    const lead1 = await LeadModel.create({\n      name: \"Abhijeet\",\n      email: \"abhijeet@gmail.com\",\n      phone: \"9876543215\",\n      source: \"Website\",\n      status: \"New\",\n      rating: \"Urgent\",\n      assignedTo: salesperson1._id,\n      notes: \"Looking for investment plots\",\n      createdAt: oct5,\n    });\n\n    const lead2 = await LeadModel.create({\n      name: \"Aniket\",\n      email: \"aniket@gmail.com\",\n      phone: \"9876543216\",\n      source: \"Referral\",\n      status: \"Contacted\",\n      rating: \"High\",\n      assignedTo: salesperson2._id,\n      notes: \"Interested in bungalow plots\",\n      createdAt: oct10,\n    });\n\n    const lead3 = await LeadModel.create({\n      name: \"Sairaj\",\n      email: \"sairaj@gmail.com\",\n      phone: \"9876543217\",\n      source: \"Facebook\",\n      status: \"Interested\",\n      rating: \"High\",\n      assignedTo: salesperson3._id,\n      followUpDate: new Date(\"2025-10-25T10:00:00\"),\n      notes: \"Budget 30-40 lakhs\",\n      createdAt: oct15,\n    });\n\n    const lead4 = await LeadModel.create({\n      name: \"Pratik\",\n      email: \"pratik@gmail.com\",\n      phone: \"9876543218\",\n      source: \"Google Ads\",\n      status: \"Site Visit\",\n      rating: \"Urgent\",\n      assignedTo: salesperson4._id,\n      followUpDate: new Date(\"2025-10-26T14:00:00\"),\n      notes: \"Wants south-facing plots\",\n      createdAt: oct20,\n    });\n\n    // Add lead interests - linking leads to projects/plots\n    // Set createdAt to match lead dates\n    await LeadInterestModel.create({\n      leadId: lead1._id,\n      projectId: project1._id,\n      plotIds: [p1Plots[0]._id, p1Plots[1]._id],\n      highestOffer: 2600000,\n      notes: \"Interested in first two plots\",\n      createdAt: oct5,\n    });\n\n    await LeadInterestModel.create({\n      leadId: lead2._id,\n      projectId: project2._id,\n      plotIds: [p2Plots[2]._id],\n      highestOffer: 3400000,\n      notes: \"Very interested in plot SH-03\",\n      createdAt: oct10,\n    });\n\n    await LeadInterestModel.create({\n      leadId: lead3._id,\n      projectId: project1._id,\n      plotIds: [p1Plots[2]._id, p1Plots[3]._id],\n      highestOffer: 2800000,\n      notes: \"Looking at GV-03 and GV-04\",\n      createdAt: oct15,\n    });\n\n    await LeadInterestModel.create({\n      leadId: lead4._id,\n      projectId: project2._id,\n      plotIds: [p2Plots[0]._id, p2Plots[4]._id],\n      highestOffer: 3100000,\n      notes: \"Wants south-facing options\",\n      createdAt: oct20,\n    });\n\n    // Create some BuyerInterest records with October dates\n    const oct7 = new Date(\"2025-10-07T13:20:00\");\n    const oct12 = new Date(\"2025-10-12T15:45:00\");\n    const oct18 = new Date(\"2025-10-18T09:30:00\");\n    \n    await BuyerInterestModel.create({\n      buyerName: \"Rajesh Kumar\",\n      buyerEmail: \"rajesh@example.com\",\n      buyerContact: \"9876543220\",\n      plotId: p1Plots[4]._id,\n      offeredPrice: 2950000,\n      salespersonId: salesperson1._id,\n      salespersonName: \"Rahul Sharma\",\n      notes: \"Looking for open plot for commercial use\",\n      createdAt: oct7,\n    });\n\n    await BuyerInterestModel.create({\n      buyerName: \"Sneha Joshi\",\n      buyerEmail: \"sneha@example.com\",\n      buyerContact: \"9876543221\",\n      plotId: p2Plots[1]._id,\n      offeredPrice: 3250000,\n      salespersonId: salesperson2._id,\n      salespersonName: \"Priya Patel\",\n      notes: \"Interested in Sunrise Heights bungalow plot\",\n      createdAt: oct12,\n    });\n\n    await BuyerInterestModel.create({\n      buyerName: \"Vikram Mehta\",\n      buyerEmail: \"vikram@example.com\",\n      buyerContact: \"9876543222\",\n      plotId: p1Plots[3]._id,\n      offeredPrice: 2850000,\n      salespersonId: salesperson3._id,\n      salespersonName: \"Amit Singh\",\n      notes: \"Commercial plot inquiry for retail outlet\",\n      createdAt: oct18,\n    });\n\n    console.log(\"Database seeded successfully!\");\n    console.log(\"Admin login: admin@example.com / password123\");\n    console.log(\"Salesperson logins: rahul@example.com, priya@example.com, amit@example.com, neha@example.com / password123\");\n  } catch (error) {\n    console.error(\"Seed error:\", error);\n  }\n}\n","size_bytes":8020},"design_guidelines.md":{"content":"# Plot Management CRM - Design Guidelines\n\n## Design Approach\n**System-Based Approach**: Material Design + ShadCN/UI components with custom blue-gold branding and glassmorphism effects for a modern, professional real estate CRM aesthetic.\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Light Mode:**\n- Primary Blue: 220 80% 45% (professional trust)\n- Gold Accent: 45 90% 55% (premium feel)\n- Success Green: 142 76% 36% (available plots)\n- Warning Yellow: 45 93% 47% (hold/warm leads)\n- Danger Red: 0 84% 60% (booked plots/cold leads)\n- Background: 0 0% 98%\n- Surface: 0 0% 100%\n- Text Primary: 220 10% 20%\n- Text Secondary: 220 10% 45%\n\n**Dark Mode:**\n- Primary Blue: 220 80% 60%\n- Gold Accent: 45 90% 65%\n- Success Green: 142 76% 45%\n- Warning Yellow: 45 93% 60%\n- Danger Red: 0 84% 70%\n- Background: 220 15% 8%\n- Surface: 220 15% 12% (glassmorphism: backdrop-blur-lg bg-opacity-80)\n- Text Primary: 0 0% 95%\n- Text Secondary: 0 0% 70%\n\n### B. Typography\n- **Primary Font**: Inter (Google Fonts) - headings and body\n- **Monospace**: JetBrains Mono - data tables, numbers\n- **Sizes**: text-xs (11px), text-sm (14px), text-base (16px), text-lg (18px), text-xl (20px), text-2xl (24px), text-3xl (30px), text-4xl (36px)\n- **Weights**: font-medium (500) for labels, font-semibold (600) for headings, font-bold (700) for emphasis\n\n### C. Layout System\n**Spacing Primitives**: Use Tailwind units of 2, 4, 6, 8, 12, 16, 20 (e.g., p-4, gap-6, mt-8, mb-12)\n- Sidebar: Fixed width 16rem (w-64)\n- Main Content: ml-64 with p-6 to p-8 padding\n- Cards: p-6 with rounded-xl shadow-lg\n- Modals: max-w-2xl to max-w-4xl centered\n\n### D. Component Library\n\n**Navigation:**\n- Sidebar: Fixed left, bg-surface with glassmorphism, icons from Heroicons, active state with blue background glow\n- Top Navbar: Sticky top, backdrop-blur-lg, user profile (avatar + dropdown), notification bell with badge counter\n\n**Data Display:**\n- Dashboard Cards: Animated on load (Framer Motion fade-in), gradient backgrounds for stats, large numbers with icons\n- Tables: Striped rows, sortable headers (arrows), search bar top-right, pagination bottom, row hover with blue tint\n- Plot Grid: CSS Grid responsive (grid-cols-4 lg:grid-cols-6 xl:grid-cols-8), each plot as clickable colored box with plot number overlay\n\n**Forms & Modals:**\n- Popup Modals: Centered overlay with backdrop blur, slide-in animation, max-w-2xl, close button top-right\n- Input Fields: Consistent with dark mode (dark bg-surface, light borders), floating labels on focus\n- Buttons: Primary (blue gradient), Secondary (outline blue), Success (green), Danger (red), all with hover lift effect\n\n**Status Indicators:**\n- Lead Stages: Pill badges with colors - Hot (green bg), Warm (yellow bg), Cold (red bg)\n- Booking Status: Booked (green), Hold (yellow), Lost (red)\n- Icons: Use Heroicons for consistency\n\n### E. Animations\n- **Dashboard Entry**: Stagger children cards with 100ms delay, fade-in + slide-up (Framer Motion)\n- **Modal Open/Close**: Scale from 0.95 to 1, fade backdrop\n- **Button Hover**: Subtle scale(1.02) and shadow increase\n- **Plot Grid Hover**: Scale(1.05) with smooth transition\n- **Table Row Hover**: Background color transition only (no movement)\n- **Page Transitions**: Minimal - fade between routes\n\n## Module-Specific Design\n\n### Authentication Pages\n- Centered card on gradient background (blue to dark blue diagonal)\n- Logo top center, form in glassmorphism card (max-w-md)\n- No hero image - focus on clean login form\n\n### Admin Dashboard\n- Top Row: 4 animated stat cards (Total Leads, Conversions, Revenue, Available Plots) with gradient backgrounds\n- Middle: Dual-column layout - left: recent activity timeline, right: salesperson leaderboard table\n- Bottom: Chart row - lead source pie chart (Recharts) and weekly revenue line chart\n- All cards with glassmorphism effect and subtle shadow\n\n### Lead Management\n- Table view default with filters sidebar (collapsible)\n- Color-coded status column with pill badges\n- Action buttons (edit, delete, assign) in last column\n- \"Add Lead\" button top-right, opens modal with multi-step form\n- Lead detail modal: tabs for Info, History, Follow-ups, Documents\n\n### Plot Management  \n- Project selector dropdown top-left\n- Interactive plot grid below: each plot as square/rectangle with plot number, size, and color-coded by status\n- Click plot opens booking modal or detail view\n- Legend bottom showing color meanings (Green=Available, Red=Booked, Yellow=Hold)\n\n### Salesperson Dashboard\n- Simplified version of admin dashboard\n- Top: \"Today's Follow-ups\" prominent section with list cards\n- Middle: Assigned leads table (simplified)\n- Bottom: Personal performance metrics (conversion rate, total bookings)\n\n### Modals\n- Add/Edit Lead: Multi-field form with sections (Contact Info, Lead Details, Assignment)\n- Book Plot: Customer details + plot selection + payment info tabs\n- All modals use consistent padding (p-6), rounded-xl, and smooth animations\n\n## Responsive Behavior\n- Desktop (lg+): Full sidebar visible, multi-column layouts\n- Tablet (md): Sidebar collapses to icons only, 2-column cards\n- Mobile (base): Hamburger menu, single column, bottom navigation for key actions\n\n## Dark Mode Toggle\n- Switch in top-right navbar (moon/sun icon)\n- Smooth transition-colors on all elements\n- Persist preference in localStorage\n\nThis design creates a professional, animated, and highly functional CRM that balances aesthetics with usability for real estate plot management.","size_bytes":5474},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/pages/admin-dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { CheckCircle, Home, DollarSign, Users } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { DashboardStats } from \"@shared/schema\";\n\nexport default function AdminDashboard() {\n  const { data: stats, isLoading: statsLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/admin\"],\n  });\n\n  if (statsLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold text-foreground\">Dashboard</h1>\n        <p className=\"text-muted-foreground mt-1\">Business overview</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center gap-2\">\n              <Users className=\"h-5 w-5 text-primary\" />\n              <span className=\"text-sm font-medium text-muted-foreground\">Total Leads</span>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-3xl font-bold\">{stats?.totalLeads || 0}</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              <span className=\"text-sm font-medium text-muted-foreground\">Converted</span>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-3xl font-bold text-green-600 dark:text-green-400\">{stats?.convertedLeads || 0}</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center gap-2\">\n              <Home className=\"h-5 w-5 text-blue-600\" />\n              <span className=\"text-sm font-medium text-muted-foreground\">Available Plots</span>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-3xl font-bold\">{stats?.availablePlots || 0}</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center gap-2\">\n              <DollarSign className=\"h-5 w-5 text-yellow-600\" />\n              <span className=\"text-sm font-medium text-muted-foreground\">Revenue</span>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-3xl font-bold\">₹{((stats?.totalRevenue || 0) / 100000).toFixed(1)}L</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Quick Stats</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4\">\n            <div className=\"space-y-2\">\n              <span className=\"text-sm text-muted-foreground\">Lost Leads</span>\n              <Badge variant=\"destructive\" className=\"w-full justify-center\" data-testid=\"badge-lost-leads\">\n                {stats?.lostLeads || 0}\n              </Badge>\n            </div>\n            <div className=\"space-y-2\">\n              <span className=\"text-sm text-muted-foreground\">Unassigned</span>\n              <Badge variant=\"secondary\" className=\"w-full justify-center\" data-testid=\"badge-unassigned-leads\">\n                {stats?.unassignedLeads || 0}\n              </Badge>\n            </div>\n            <div className=\"space-y-2\">\n              <span className=\"text-sm text-muted-foreground\">Projects</span>\n              <Badge className=\"bg-primary w-full justify-center\" data-testid=\"badge-total-projects\">\n                {stats?.totalProjects || 0}\n              </Badge>\n            </div>\n            <div className=\"space-y-2\">\n              <span className=\"text-sm text-muted-foreground\">Booked Plots</span>\n              <Badge className=\"bg-green-600 w-full justify-center\" data-testid=\"badge-booked-plots\">\n                {stats?.bookedPlots || 0}\n              </Badge>\n            </div>\n            <div className=\"space-y-2\">\n              <span className=\"text-sm text-muted-foreground\">Today's Follow-ups</span>\n              <Badge className=\"bg-blue-600 w-full justify-center\" data-testid=\"badge-today-followups\">\n                {stats?.todayFollowUps || 0}\n              </Badge>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4693},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\n\nimport { User, Lock, Save } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/auth\";\n\nexport default function Settings() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [name, setName] = useState(user?.name || \"\");\n  const [email, setEmail] = useState(user?.email || \"\");\n  const [currentPassword, setCurrentPassword] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n  const handleProfileUpdate = (e: React.FormEvent) => {\n    e.preventDefault();\n    toast({\n      title: \"Profile updated\",\n      description: \"Your profile information has been updated successfully.\",\n    });\n  };\n\n  const handlePasswordChange = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (newPassword !== confirmPassword) {\n      toast({\n        title: \"Error\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    toast({\n      title: \"Password changed\",\n      description: \"Your password has been updated successfully.\",\n    });\n    setCurrentPassword(\"\");\n    setNewPassword(\"\");\n    setConfirmPassword(\"\");\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div\n      >\n        <h1 className=\"text-3xl font-bold text-foreground\">Settings</h1>\n        <p className=\"text-muted-foreground mt-1\">Manage your account settings and preferences</p>\n      </div>\n\n      <Tabs defaultValue=\"profile\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"profile\" data-testid=\"tab-profile\">\n            <User className=\"h-4 w-4 mr-2\" />\n            Profile\n          </TabsTrigger>\n          <TabsTrigger value=\"security\" data-testid=\"tab-security\">\n            <Lock className=\"h-4 w-4 mr-2\" />\n            Security\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"profile\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Profile Information</CardTitle>\n              <CardDescription>Update your account profile information</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleProfileUpdate} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\">Name</Label>\n                  <Input\n                    id=\"name\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                    data-testid=\"input-profile-name\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    data-testid=\"input-profile-email\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"role\">Role</Label>\n                  <Input\n                    id=\"role\"\n                    value={user?.role}\n                    disabled\n                    className=\"bg-muted\"\n                    data-testid=\"input-profile-role\"\n                  />\n                </div>\n                <div className=\"flex justify-end\">\n                  <Button type=\"submit\" data-testid=\"button-save-profile\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Save Changes\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"security\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Change Password</CardTitle>\n              <CardDescription>Update your password to keep your account secure</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handlePasswordChange} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"current-password\">Current Password</Label>\n                  <Input\n                    id=\"current-password\"\n                    type=\"password\"\n                    value={currentPassword}\n                    onChange={(e) => setCurrentPassword(e.target.value)}\n                    data-testid=\"input-current-password\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"new-password\">New Password</Label>\n                  <Input\n                    id=\"new-password\"\n                    type=\"password\"\n                    value={newPassword}\n                    onChange={(e) => setNewPassword(e.target.value)}\n                    data-testid=\"input-new-password\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirm-password\">Confirm New Password</Label>\n                  <Input\n                    id=\"confirm-password\"\n                    type=\"password\"\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                    data-testid=\"input-confirm-password\"\n                  />\n                </div>\n                <div className=\"flex justify-end\">\n                  <Button type=\"submit\" data-testid=\"button-change-password\">\n                    <Lock className=\"h-4 w-4 mr-2\" />\n                    Change Password\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":6085},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"server/reset-admin.ts":{"content":"import bcrypt from \"bcryptjs\";\nimport { UserModel } from \"./models\";\nimport { connectDB } from \"./db\";\n\nasync function resetAdminPassword() {\n  try {\n    await connectDB();\n    \n    const hashedPassword = await bcrypt.hash(\"password123\", 10);\n    \n    const result = await UserModel.updateOne(\n      { email: \"admin@example.com\" },\n      { $set: { password: hashedPassword } }\n    );\n    \n    if (result.matchedCount > 0) {\n      console.log(\"✓ Admin password reset successfully\");\n      console.log(\"Login with: admin@example.com / password123\");\n    } else {\n      console.log(\"✗ Admin user not found\");\n    }\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(\"Error resetting password:\", error);\n    process.exit(1);\n  }\n}\n\nresetAdminPassword();\n","size_bytes":767},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/lib/theme\";\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      className=\"h-9 w-9\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-4 w-4\" />\n      ) : (\n        <Sun className=\"h-4 w-4\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":569},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/pages/leads.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus, Search, Filter, Edit, Trash2, UserPlus, Eye, Repeat, Download, FileSpreadsheet, Phone } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Lead, User, InsertLead, Project, Plot, PopulatedUser, InsertCallLog, CallLog } from \"@shared/schema\";\nimport { exportToCSV, exportToExcel } from \"@/lib/csv-export\";\nimport { format } from \"date-fns\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertLeadSchema, leadSources, leadStatuses, leadRatings, leadClassifications, insertCallLogSchema, callStatuses } from \"@shared/schema\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\n\nexport default function Leads() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [ratingFilter, setRatingFilter] = useState<string>(\"all\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  const [isAssignDialogOpen, setIsAssignDialogOpen] = useState(false);\n  const [isTransferDialogOpen, setIsTransferDialogOpen] = useState(false);\n  const [isCallLogDialogOpen, setIsCallLogDialogOpen] = useState(false);\n  const [selectedLead, setSelectedLead] = useState<Lead | null>(null);\n  const [selectedProjectId, setSelectedProjectId] = useState<string>(\"\");\n  const [selectedPlotIds, setSelectedPlotIds] = useState<string[]>([]);\n  const [editProjectId, setEditProjectId] = useState<string>(\"\");\n  const [editPlotIds, setEditPlotIds] = useState<string[]>([]);\n  const { toast } = useToast();\n  const { user, isAdmin } = useAuth();\n\n  const { data: leads, isLoading } = useQuery<Lead[]>({\n    queryKey: [\"/api/leads\"],\n  });\n\n  const { data: salespersons } = useQuery<User[]>({\n    queryKey: [\"/api/users/salespersons\"],\n  });\n\n  const { data: projects } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: plots } = useQuery<Plot[]>({\n    queryKey: [\"/api/plots\"],\n  });\n\n  // Filter plots by selected project\n  const filteredPlots = plots?.filter(plot => \n    selectedProjectId ? plot.projectId === selectedProjectId : true\n  ) || [];\n  \n  // Filter plots for edit mode\n  const editFilteredPlots = plots?.filter(plot => \n    editProjectId ? plot.projectId === editProjectId : true\n  ) || [];\n\n  const form = useForm<InsertLead>({\n    resolver: zodResolver(insertLeadSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      source: \"Website\",\n      status: \"New\",\n      rating: \"High\",\n      notes: \"\",\n      projectId: \"\",\n      plotIds: [],\n      highestOffer: 0,\n    },\n  });\n\n  const editForm = useForm<InsertLead>({\n    resolver: zodResolver(insertLeadSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      source: \"Website\",\n      status: \"New\",\n      rating: \"High\",\n      notes: \"\",\n      projectId: \"\",\n      plotIds: [],\n      assignedTo: \"\",\n      highestOffer: 0,\n    },\n  });\n\n  const callLogForm = useForm<InsertCallLog>({\n    resolver: zodResolver(insertCallLogSchema),\n    defaultValues: {\n      leadId: \"\",\n      callStatus: \"Called - No Answer\",\n      notes: \"\",\n      nextFollowUpDate: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertLead) => apiRequest(\"POST\", \"/api/leads\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/plots\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      toast({ title: \"Lead created successfully\" });\n      setIsAddDialogOpen(false);\n      setSelectedProjectId(\"\");\n      setSelectedPlotIds([]);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: InsertLead }) =>\n      apiRequest(\"PATCH\", `/api/leads/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/plots\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects/overview\"] });\n      toast({ title: \"Lead updated successfully\" });\n      setIsEditDialogOpen(false);\n      setSelectedLead(null);\n      setEditProjectId(\"\");\n      setEditPlotIds([]);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/leads/${id}`, {}),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      toast({ title: \"Lead deleted successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const assignMutation = useMutation({\n    mutationFn: ({ leadId, salespersonId }: { leadId: string; salespersonId: string }) =>\n      apiRequest(\"PATCH\", `/api/leads/${leadId}/assign`, { salespersonId }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      toast({ title: \"Lead assigned successfully\" });\n      setIsAssignDialogOpen(false);\n      setSelectedLead(null);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const transferMutation = useMutation({\n    mutationFn: ({ leadId, salespersonId }: { leadId: string; salespersonId: string }) =>\n      apiRequest(\"PATCH\", `/api/leads/${leadId}/transfer`, { salespersonId }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      toast({ title: \"Lead transferred successfully\" });\n      setIsTransferDialogOpen(false);\n      setSelectedLead(null);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const callLogMutation = useMutation({\n    mutationFn: (data: InsertCallLog) => apiRequest(\"POST\", \"/api/call-logs\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/call-logs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/call-logs/all\"] });\n      toast({ title: \"Call logged successfully\" });\n      setIsCallLogDialogOpen(false);\n      setSelectedLead(null);\n      callLogForm.reset();\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Booked\": return \"bg-chart-3 text-white\";\n      case \"Lost\": return \"bg-destructive text-white\";\n      case \"Site Visit\": return \"bg-chart-2 text-foreground\";\n      case \"Interested\": return \"bg-primary text-white\";\n      default: return \"bg-secondary\";\n    }\n  };\n\n  const getRatingColor = (rating: string) => {\n    switch (rating) {\n      case \"Urgent\": return \"bg-chart-3 text-white\";\n      case \"High\": return \"bg-chart-4 text-foreground\";\n      case \"Low\": return \"bg-chart-1 text-foreground\";\n      default: return \"bg-secondary\";\n    }\n  };\n\n  // Filter leads based on search and filters\n  const baseFilteredLeads = leads?.filter((lead) => {\n    const matchesSearch = lead.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      lead.phone.includes(searchTerm) ||\n      (lead.email?.toLowerCase().includes(searchTerm.toLowerCase()) ?? false);\n    const matchesStatus = statusFilter === \"all\" || lead.status === statusFilter;\n    const matchesRating = ratingFilter === \"all\" || lead.rating === ratingFilter;\n    return matchesSearch && matchesStatus && matchesRating;\n  });\n\n  // Split leads for salespeople\n  const myLeads = !isAdmin && user ? baseFilteredLeads?.filter((lead) => {\n    const assignedToId = lead.assignedTo \n      ? (typeof lead.assignedTo === 'object' ? (lead.assignedTo as PopulatedUser)._id : lead.assignedTo)\n      : null;\n    return assignedToId === user._id;\n  }) : [];\n\n  const otherLeads = !isAdmin && user ? baseFilteredLeads?.filter((lead) => {\n    const assignedToId = lead.assignedTo \n      ? (typeof lead.assignedTo === 'object' ? (lead.assignedTo as PopulatedUser)._id : lead.assignedTo)\n      : null;\n    return assignedToId !== user._id;\n  }) : [];\n\n  // For admins, show all filtered leads\n  const filteredLeads = isAdmin ? baseFilteredLeads : baseFilteredLeads;\n\n  const handleSubmit = (data: InsertLead) => {\n    createMutation.mutate(data);\n  };\n\n  const handleEdit = (lead: Lead) => {\n    setSelectedLead(lead);\n    setEditProjectId(lead.projectId || \"\");\n    setEditPlotIds(lead.plotIds || []);\n    const assignedToId = lead.assignedTo \n      ? (typeof lead.assignedTo === 'object' ? (lead.assignedTo as PopulatedUser)._id : lead.assignedTo)\n      : \"\";\n    editForm.reset({\n      name: lead.name,\n      email: lead.email || \"\",\n      phone: lead.phone,\n      source: lead.source,\n      status: lead.status,\n      rating: lead.rating,\n      followUpDate: lead.followUpDate ? new Date(lead.followUpDate).toISOString().slice(0, 16) : \"\",\n      notes: lead.notes || \"\",\n      projectId: lead.projectId || \"\",\n      plotIds: lead.plotIds || [],\n      assignedTo: assignedToId,\n      highestOffer: lead.highestOffer || 0,\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleView = (lead: Lead) => {\n    setSelectedLead(lead);\n    setIsViewDialogOpen(true);\n  };\n\n  const handleUpdate = (data: InsertLead) => {\n    if (selectedLead) {\n      updateMutation.mutate({ id: selectedLead._id, data });\n    }\n  };\n\n  const handleLogCall = (lead: Lead) => {\n    setSelectedLead(lead);\n    callLogForm.reset({\n      leadId: lead._id,\n      callStatus: \"Called - No Answer\",\n      notes: \"\",\n      nextFollowUpDate: \"\",\n    });\n    setIsCallLogDialogOpen(true);\n  };\n\n  const handleCallLogSubmit = (data: InsertCallLog) => {\n    callLogMutation.mutate(data);\n  };\n\n  const handleExportLeads = (exportFormat: \"csv\" | \"excel\") => {\n    if (!filteredLeads || filteredLeads.length === 0) {\n      alert(\"No leads to export\");\n      return;\n    }\n\n    const exportData = filteredLeads.map((lead) => ({\n      \"Name\": lead.name,\n      \"Email\": lead.email || \"\",\n      \"Phone\": lead.phone,\n      \"Source\": lead.source,\n      \"Status\": lead.status,\n      \"Rating\": lead.rating,\n      \"Assigned To\": typeof lead.assignedTo === 'object' ? (lead.assignedTo as PopulatedUser).name : \"\",\n      \"Follow Up Date\": lead.followUpDate ? format(new Date(lead.followUpDate), \"dd/MM/yyyy\") : \"\",\n      \"Highest Offer (₹)\": lead.highestOffer || 0,\n      \"Notes\": lead.notes || \"\",\n      \"Created At\": format(new Date(lead.createdAt), \"dd/MM/yyyy HH:mm\"),\n    }));\n\n    const filename = `leads-export-${new Date().toISOString().split('T')[0]}`;\n    if (exportFormat === \"csv\") {\n      exportToCSV(exportData, filename);\n    } else {\n      exportToExcel(exportData, filename);\n    }\n  };\n\n  // Helper function to render leads table\n  const renderLeadsTable = (leadsToRender: Lead[] | undefined, emptyMessage: string) => {\n    if (!leadsToRender || leadsToRender.length === 0) {\n      return (\n        <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n          <Filter className=\"h-12 w-12 text-muted-foreground/50 mb-3\" />\n          <p className=\"text-lg font-medium text-foreground\">No leads found</p>\n          <p className=\"text-sm text-muted-foreground mt-1\">{emptyMessage}</p>\n        </div>\n      );\n    }\n\n    return (\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Name</TableHead>\n            <TableHead>Contact</TableHead>\n            <TableHead>Source</TableHead>\n            <TableHead>Status</TableHead>\n            <TableHead>Rating</TableHead>\n            <TableHead>Classification</TableHead>\n            {isAdmin && <TableHead>Added By</TableHead>}\n            <TableHead>Assigned To</TableHead>\n            <TableHead className=\"text-right\">Actions</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {leadsToRender.map((lead) => (\n            <TableRow\n              key={lead._id}\n              className=\"hover-elevate\"\n              data-testid={`row-lead-${lead._id}`}\n            >\n              <TableCell className=\"font-medium\">{lead.name}</TableCell>\n              <TableCell>\n                <div className=\"text-sm\">\n                  <div>{lead.phone}</div>\n                  {lead.email && <div className=\"text-muted-foreground\">{lead.email}</div>}\n                </div>\n              </TableCell>\n              <TableCell>{lead.source}</TableCell>\n              <TableCell>\n                <Badge className={getStatusColor(lead.status)} data-testid={`badge-status-${lead._id}`}>\n                  {lead.status}\n                </Badge>\n              </TableCell>\n              <TableCell>\n                <Badge className={getRatingColor(lead.rating)} data-testid={`badge-rating-${lead._id}`}>\n                  {lead.rating}\n                </Badge>\n              </TableCell>\n              <TableCell>\n                {lead.classification ? (\n                  <Badge \n                    className={lead.classification === \"Important\" ? \"bg-orange-500\" : \"bg-blue-500\"} \n                    data-testid={`badge-classification-${lead._id}`}\n                  >\n                    {lead.classification}\n                  </Badge>\n                ) : (\n                  <span className=\"text-sm text-muted-foreground\">-</span>\n                )}\n              </TableCell>\n              {isAdmin && (\n                <TableCell>\n                  {lead.assignedBy ? (\n                    <span className=\"text-sm text-muted-foreground\" data-testid={`text-added-by-${lead._id}`}>\n                      {typeof lead.assignedBy === 'object' \n                        ? (lead.assignedBy as PopulatedUser).name \n                        : 'Unknown'}\n                    </span>\n                  ) : (\n                    <span className=\"text-sm text-muted-foreground\">Admin</span>\n                  )}\n                </TableCell>\n              )}\n              <TableCell>\n                {lead.assignedTo ? (\n                  <span className=\"text-sm\" data-testid={`text-assigned-to-${lead._id}`}>\n                    {typeof lead.assignedTo === 'object' \n                      ? (lead.assignedTo as PopulatedUser).name \n                      : 'Assigned'}\n                  </span>\n                ) : (\n                  isAdmin ? (\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setSelectedLead(lead);\n                        setIsAssignDialogOpen(true);\n                      }}\n                      data-testid={`button-assign-${lead._id}`}\n                    >\n                      <UserPlus className=\"h-3 w-3 mr-1\" />\n                      Assign\n                    </Button>\n                  ) : (\n                    <span className=\"text-sm text-muted-foreground\">Unassigned</span>\n                  )\n                )}\n              </TableCell>\n              <TableCell className=\"text-right\">\n                <div className=\"flex justify-end gap-2\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => handleView(lead)}\n                    data-testid={`button-view-${lead._id}`}\n                  >\n                    <Eye className=\"h-3 w-3\" />\n                  </Button>\n                  {!isAdmin && lead.assignedTo && String(typeof lead.assignedTo === 'object' ? (lead.assignedTo as PopulatedUser)._id : lead.assignedTo) === user?._id && (\n                    <>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleLogCall(lead)}\n                        data-testid={`button-log-call-${lead._id}`}\n                      >\n                        <Phone className=\"h-3 w-3\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => {\n                          setSelectedLead(lead);\n                          setIsTransferDialogOpen(true);\n                        }}\n                        data-testid={`button-transfer-${lead._id}`}\n                      >\n                        <Repeat className=\"h-3 w-3\" />\n                      </Button>\n                    </>\n                  )}\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => handleEdit(lead)}\n                    data-testid={`button-edit-${lead._id}`}\n                  >\n                    <Edit className=\"h-3 w-3\" />\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"destructive\"\n                    onClick={() => deleteMutation.mutate(lead._id)}\n                    disabled={deleteMutation.isPending}\n                    data-testid={`button-delete-${lead._id}`}\n                  >\n                    <Trash2 className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-wrap items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Leads Management</h1>\n          <p className=\"text-muted-foreground mt-1\">Track and manage all your leads</p>\n        </div>\n        <div className=\"flex gap-3\">\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" data-testid=\"button-export-leads\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export Leads\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent>\n              <DropdownMenuItem onClick={() => handleExportLeads(\"csv\")} data-testid=\"menu-export-leads-csv\">\n                <FileSpreadsheet className=\"h-4 w-4 mr-2\" />\n                Export as CSV\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => handleExportLeads(\"excel\")} data-testid=\"menu-export-leads-excel\">\n                <FileSpreadsheet className=\"h-4 w-4 mr-2\" />\n                Export as Excel\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-lead\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Lead\n              </Button>\n            </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Add New Lead</DialogTitle>\n              <DialogDescription>Create a new lead entry in the system</DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"John Doe\" {...field} data-testid=\"input-lead-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"9876543210\" {...field} data-testid=\"input-lead-phone\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email (Optional)</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" placeholder=\"john@example.com\" {...field} data-testid=\"input-lead-email\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"source\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Source</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-lead-source\">\n                              <SelectValue placeholder=\"Select source\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {leadSources.map((source) => (\n                              <SelectItem key={source} value={source}>\n                                {source}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"status\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Status</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-lead-status\">\n                              <SelectValue placeholder=\"Select status\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {leadStatuses.map((status) => (\n                              <SelectItem key={status} value={status}>\n                                {status}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"rating\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Rating</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-lead-rating\">\n                              <SelectValue placeholder=\"Select rating\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {leadRatings.map((rating) => (\n                              <SelectItem key={rating} value={rating}>\n                                {rating}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"classification\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Classification (Optional)</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-lead-classification\">\n                              <SelectValue placeholder=\"Select classification\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {leadClassifications.map((classification) => (\n                              <SelectItem key={classification} value={classification}>\n                                {classification}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={form.control}\n                  name=\"followUpDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Follow-up Date (Optional)</FormLabel>\n                      <FormControl>\n                        <Input type=\"datetime-local\" {...field} data-testid=\"input-lead-followup\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notes (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Add any additional notes...\"\n                          {...field}\n                          data-testid=\"input-lead-notes\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Salesperson Assignment for all users */}\n                <FormField\n                  control={form.control}\n                  name=\"assignedTo\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Assign to Salesperson (Optional)</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-lead-salesperson\">\n                            <SelectValue placeholder=\"Select a salesperson\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {salespersons?.map((sp) => (\n                            <SelectItem key={sp._id} value={sp._id}>\n                              {sp.name} ({sp.email})\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"border-t pt-4\">\n                  <h3 className=\"font-semibold mb-3\">Project Interest (Optional)</h3>\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"projectId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Project</FormLabel>\n                        <Select \n                          onValueChange={(value) => {\n                            field.onChange(value);\n                            setSelectedProjectId(value);\n                            setSelectedPlotIds([]);\n                            form.setValue(\"plotIds\", []);\n                          }} \n                          value={field.value}\n                        >\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-lead-project\">\n                              <SelectValue placeholder=\"Select a project\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {projects?.map((project) => (\n                              <SelectItem key={project._id} value={project._id}>\n                                {project.name} - {project.location}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {selectedProjectId && (\n                    <>\n                      <FormField\n                        control={form.control}\n                        name=\"plotIds\"\n                        render={({ field }) => (\n                          <FormItem className=\"mt-4\">\n                            <FormLabel>Select Plots</FormLabel>\n                            <div className=\"grid grid-cols-2 gap-2 max-h-48 overflow-y-auto border rounded-md p-3\">\n                              {filteredPlots.map((plot) => (\n                                <div key={plot._id} className=\"flex items-center space-x-2\">\n                                  <Checkbox\n                                    checked={field.value?.includes(plot._id)}\n                                    onCheckedChange={(checked) => {\n                                      const updatedPlots = checked\n                                        ? [...(field.value || []), plot._id]\n                                        : (field.value || []).filter((id) => id !== plot._id);\n                                      field.onChange(updatedPlots);\n                                      setSelectedPlotIds(updatedPlots);\n                                    }}\n                                    data-testid={`checkbox-plot-${plot._id}`}\n                                  />\n                                  <Label className=\"text-sm font-normal cursor-pointer\">\n                                    {plot.plotNumber} ({plot.size}) - ₹{plot.price.toLocaleString()}\n                                  </Label>\n                                </div>\n                              ))}\n                            </div>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"highestOffer\"\n                        render={({ field }) => (\n                          <FormItem className=\"mt-4\">\n                            <FormLabel>Highest Offer (Optional)</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                placeholder=\"Enter amount\" \n                                {...field}\n                                data-testid=\"input-lead-offer\" \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </>\n                  )}\n                </div>\n\n                <div className=\"flex justify-end gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setIsAddDialogOpen(false);\n                      setSelectedProjectId(\"\");\n                      setSelectedPlotIds([]);\n                    }}\n                    data-testid=\"button-cancel-lead\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createMutation.isPending} data-testid=\"button-submit-lead\">\n                    {createMutation.isPending ? \"Creating...\" : \"Create Lead\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n        </div>\n      </div>\n\n      <div className=\"flex flex-wrap gap-4\">\n        <div className=\"flex-1 min-w-[200px]\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search leads...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-9\"\n              data-testid=\"input-search-leads\"\n            />\n          </div>\n        </div>\n        <Select value={statusFilter} onValueChange={setStatusFilter}>\n          <SelectTrigger className=\"w-[150px]\" data-testid=\"select-filter-status\">\n            <SelectValue placeholder=\"Status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Status</SelectItem>\n            {leadStatuses.map((status) => (\n              <SelectItem key={status} value={status}>\n                {status}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n        <Select value={ratingFilter} onValueChange={setRatingFilter}>\n          <SelectTrigger className=\"w-[150px]\" data-testid=\"select-filter-rating\">\n            <SelectValue placeholder=\"Rating\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Ratings</SelectItem>\n            {leadRatings.map((rating) => (\n              <SelectItem key={rating} value={rating}>\n                {rating}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Admin View - Single Table */}\n      {isAdmin ? (\n        <div className=\"rounded-lg border border-border bg-card\">\n          {isLoading ? (\n            <div className=\"flex justify-center py-12\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n            </div>\n          ) : (\n            renderLeadsTable(filteredLeads, \"Try adjusting your filters or add a new lead\")\n          )}\n        </div>\n      ) : (\n        /* Salesperson View - Tabbed Interface */\n        <Tabs defaultValue=\"my-leads\" className=\"w-full\">\n          <TabsList className=\"grid w-full max-w-md grid-cols-2\">\n            <TabsTrigger value=\"my-leads\" data-testid=\"tab-my-leads\">\n              My Leads ({myLeads?.length || 0})\n            </TabsTrigger>\n            <TabsTrigger value=\"other-leads\" data-testid=\"tab-other-leads\">\n              Other Leads ({otherLeads?.length || 0})\n            </TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"my-leads\" className=\"mt-4\">\n            <div className=\"rounded-lg border border-border bg-card\">\n              {isLoading ? (\n                <div className=\"flex justify-center py-12\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n                </div>\n              ) : (\n                renderLeadsTable(myLeads, \"You don't have any assigned leads yet\")\n              )}\n            </div>\n          </TabsContent>\n          <TabsContent value=\"other-leads\" className=\"mt-4\">\n            <div className=\"rounded-lg border border-border bg-card\">\n              {isLoading ? (\n                <div className=\"flex justify-center py-12\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n                </div>\n              ) : (\n                renderLeadsTable(otherLeads, \"No other leads available\")\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n      )}\n\n      {/* View Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Lead Details</DialogTitle>\n            <DialogDescription>View complete information about this lead</DialogDescription>\n          </DialogHeader>\n          {selectedLead && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-muted-foreground\">Name</Label>\n                  <p className=\"text-foreground font-medium\">{selectedLead.name}</p>\n                </div>\n                <div>\n                  <Label className=\"text-muted-foreground\">Phone</Label>\n                  <p className=\"text-foreground font-medium\">{selectedLead.phone}</p>\n                </div>\n              </div>\n              <div>\n                <Label className=\"text-muted-foreground\">Email</Label>\n                <p className=\"text-foreground font-medium\">{selectedLead.email || \"N/A\"}</p>\n              </div>\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <Label className=\"text-muted-foreground\">Source</Label>\n                  <p className=\"text-foreground font-medium\">{selectedLead.source}</p>\n                </div>\n                <div>\n                  <Label className=\"text-muted-foreground\">Status</Label>\n                  <Badge className={getStatusColor(selectedLead.status)}>{selectedLead.status}</Badge>\n                </div>\n                <div>\n                  <Label className=\"text-muted-foreground\">Rating</Label>\n                  <Badge className={getRatingColor(selectedLead.rating)}>{selectedLead.rating}</Badge>\n                </div>\n              </div>\n              <div>\n                <Label className=\"text-muted-foreground\">Follow-up Date</Label>\n                <p className=\"text-foreground font-medium\">\n                  {selectedLead.followUpDate\n                    ? format(new Date(selectedLead.followUpDate), \"PPP\")\n                    : \"Not scheduled\"}\n                </p>\n              </div>\n              <div>\n                <Label className=\"text-muted-foreground\">Notes</Label>\n                <p className=\"text-foreground font-medium\">{selectedLead.notes || \"No notes\"}</p>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-muted-foreground\">Assigned To</Label>\n                  <p className=\"text-foreground font-medium\">\n                    {selectedLead.assignedTo \n                      ? (typeof selectedLead.assignedTo === 'object' \n                        ? (selectedLead.assignedTo as PopulatedUser).name \n                        : 'Assigned')\n                      : 'Unassigned'}\n                  </p>\n                </div>\n                {selectedLead.assignedBy && (\n                  <div>\n                    <Label className=\"text-muted-foreground\">Transferred By</Label>\n                    <p className=\"text-foreground font-medium\">\n                      {typeof selectedLead.assignedBy === 'object' \n                        ? (selectedLead.assignedBy as PopulatedUser).name \n                        : 'Transferred'}\n                    </p>\n                  </div>\n                )}\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-muted-foreground\">Created At</Label>\n                  <p className=\"text-foreground font-medium\">\n                    {format(new Date(selectedLead.createdAt), \"PPP\")}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-muted-foreground\">Updated At</Label>\n                  <p className=\"text-foreground font-medium\">\n                    {format(new Date(selectedLead.updatedAt), \"PPP\")}\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Lead</DialogTitle>\n            <DialogDescription>Update lead information</DialogDescription>\n          </DialogHeader>\n          <Form {...editForm}>\n            <form onSubmit={editForm.handleSubmit(handleUpdate)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"John Doe\" {...field} data-testid=\"input-edit-lead-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"9876543210\" {...field} data-testid=\"input-edit-lead-phone\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              <FormField\n                control={editForm.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email (Optional)</FormLabel>\n                    <FormControl>\n                      <Input type=\"email\" placeholder=\"john@example.com\" {...field} data-testid=\"input-edit-lead-email\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"source\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Source</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-edit-lead-source\">\n                            <SelectValue placeholder=\"Select source\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {leadSources.map((source) => (\n                            <SelectItem key={source} value={source}>\n                              {source}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"status\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Status</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-edit-lead-status\">\n                            <SelectValue placeholder=\"Select status\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {leadStatuses.map((status) => (\n                            <SelectItem key={status} value={status}>\n                              {status}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"rating\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Rating</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-edit-lead-rating\">\n                            <SelectValue placeholder=\"Select rating\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {leadRatings.map((rating) => (\n                            <SelectItem key={rating} value={rating}>\n                              {rating}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              <FormField\n                control={editForm.control}\n                name=\"followUpDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Follow-up Date (Optional)</FormLabel>\n                    <FormControl>\n                      <Input type=\"datetime-local\" {...field} data-testid=\"input-edit-lead-followup\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              {isAdmin && (\n                <FormField\n                  control={editForm.control}\n                  name=\"assignedTo\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Assigned Salesperson (Optional)</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-edit-lead-salesperson\">\n                            <SelectValue placeholder=\"Not assigned\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {salespersons?.map((sp) => (\n                            <SelectItem key={sp._id} value={sp._id}>\n                              {sp.name} ({sp.email})\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n              <FormField\n                control={editForm.control}\n                name=\"projectId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Project (Optional)</FormLabel>\n                    <Select \n                      onValueChange={(value) => {\n                        field.onChange(value);\n                        setEditProjectId(value);\n                        setEditPlotIds([]);\n                        editForm.setValue(\"plotIds\", []);\n                      }} \n                      value={field.value}\n                    >\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-edit-lead-project\">\n                          <SelectValue placeholder=\"No project selected\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {projects?.map((project) => (\n                          <SelectItem key={project._id} value={project._id}>\n                            {project.name} - {project.location}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              {editProjectId && editFilteredPlots.length > 0 && (\n                <>\n                  <div className=\"space-y-2\">\n                    <Label>Select Plots (Optional)</Label>\n                    <div className=\"border rounded-md p-4 max-h-48 overflow-y-auto space-y-2\">\n                      {editFilteredPlots.map((plot) => (\n                        <div key={plot._id} className=\"flex items-center space-x-2\">\n                          <Checkbox\n                            id={`edit-plot-${plot._id}`}\n                            checked={editPlotIds.includes(plot._id)}\n                            onCheckedChange={(checked) => {\n                              const newPlotIds = checked\n                                ? [...editPlotIds, plot._id]\n                                : editPlotIds.filter((id) => id !== plot._id);\n                              setEditPlotIds(newPlotIds);\n                              editForm.setValue(\"plotIds\", newPlotIds);\n                            }}\n                            data-testid={`checkbox-edit-plot-${plot._id}`}\n                          />\n                          <label\n                            htmlFor={`edit-plot-${plot._id}`}\n                            className=\"text-sm cursor-pointer\"\n                          >\n                            Plot #{plot.plotNumber} - {plot.size} - ₹{plot.price.toLocaleString()}\n                          </label>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"highestOffer\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Highest Offer (Optional)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            placeholder=\"Enter amount\" \n                            {...field}\n                            data-testid=\"input-edit-lead-offer\" \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </>\n              )}\n              <FormField\n                control={editForm.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notes (Optional)</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Add any additional notes...\"\n                        {...field}\n                        data-testid=\"input-edit-lead-notes\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-end gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsEditDialogOpen(false)}\n                  data-testid=\"button-cancel-edit-lead\"\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={updateMutation.isPending} data-testid=\"button-submit-edit-lead\">\n                  {updateMutation.isPending ? \"Updating...\" : \"Update Lead\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Assign Dialog */}\n      <Dialog open={isAssignDialogOpen} onOpenChange={setIsAssignDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Assign Lead</DialogTitle>\n            <DialogDescription>\n              Assign {selectedLead?.name} to a salesperson\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label>Select Salesperson</Label>\n              <Select\n                onValueChange={(value) => {\n                  if (selectedLead) {\n                    assignMutation.mutate({\n                      leadId: selectedLead._id,\n                      salespersonId: value,\n                    });\n                  }\n                }}\n              >\n                <SelectTrigger data-testid=\"select-salesperson\">\n                  <SelectValue placeholder=\"Choose a salesperson\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {salespersons?.map((sp) => (\n                    <SelectItem key={sp._id} value={sp._id}>\n                      {sp.name} ({sp.email})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Transfer Dialog */}\n      <Dialog open={isTransferDialogOpen} onOpenChange={setIsTransferDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Transfer Lead</DialogTitle>\n            <DialogDescription>\n              Transfer {selectedLead?.name} to another salesperson\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label>Select Salesperson</Label>\n              <Select\n                onValueChange={(value) => {\n                  if (selectedLead) {\n                    transferMutation.mutate({\n                      leadId: selectedLead._id,\n                      salespersonId: value,\n                    });\n                  }\n                }}\n              >\n                <SelectTrigger data-testid=\"select-transfer-salesperson\">\n                  <SelectValue placeholder=\"Choose a salesperson\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {salespersons?.filter(sp => sp._id !== user?._id).map((sp) => (\n                    <SelectItem key={sp._id} value={sp._id}>\n                      {sp.name} ({sp.email})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Call Log Dialog */}\n      <Dialog open={isCallLogDialogOpen} onOpenChange={setIsCallLogDialogOpen}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Log Call</DialogTitle>\n            <DialogDescription>\n              Record your call with {selectedLead?.name}\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...callLogForm}>\n            <form onSubmit={callLogForm.handleSubmit(handleCallLogSubmit)} className=\"space-y-4\">\n              <FormField\n                control={callLogForm.control}\n                name=\"callStatus\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Call Status</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-call-status\">\n                          <SelectValue placeholder=\"Select call status\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {callStatuses.map((status) => (\n                          <SelectItem key={status} value={status}>\n                            {status}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={callLogForm.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notes</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Add call notes...\"\n                        {...field}\n                        rows={4}\n                        data-testid=\"textarea-call-notes\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={callLogForm.control}\n                name=\"nextFollowUpDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Next Follow-up Date</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"datetime-local\"\n                        {...field}\n                        data-testid=\"input-next-followup\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end gap-3\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsCallLogDialogOpen(false)}\n                  data-testid=\"button-cancel-call-log\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={callLogMutation.isPending}\n                  data-testid=\"button-submit-call-log\"\n                >\n                  {callLogMutation.isPending ? \"Saving...\" : \"Save Call Log\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":60408},"client/src/pages/analytics.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { format, startOfDay, startOfWeek, startOfMonth, endOfDay, subMonths } from \"date-fns\";\nimport type {\n  AnalyticsOverview,\n  DailyMetric,\n  MonthlyMetric,\n  ActivityTimeline,\n  LeadSourceAnalysis,\n  PlotCategoryPerformance,\n} from \"@shared/schema\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport {\n  Users,\n  TrendingUp,\n  DollarSign,\n  Target,\n  Activity,\n  Calendar,\n  Phone,\n  Award,\n} from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\nconst COLORS = [\"#3b82f6\", \"#10b981\", \"#f59e0b\", \"#ef4444\", \"#8b5cf6\", \"#ec4899\"];\n\nexport default function AnalyticsPage() {\n  const [dateRange, setDateRange] = useState(\"this_month\");\n\n  const getDateRange = () => {\n    const now = new Date();\n    const end = endOfDay(now);\n    let start: Date;\n    \n    switch (dateRange) {\n      case \"today\":\n        start = startOfDay(now);\n        break;\n      case \"this_week\":\n        start = startOfWeek(now, { weekStartsOn: 1 }); // Week starts on Monday\n        break;\n      case \"this_month\":\n        start = startOfMonth(now);\n        break;\n      case \"last_3_months\":\n        start = startOfMonth(subMonths(now, 3));\n        break;\n      case \"last_6_months\":\n        start = startOfMonth(subMonths(now, 6));\n        break;\n      default:\n        start = startOfMonth(now);\n    }\n    \n    return { startDate: start.toISOString(), endDate: end.toISOString() };\n  };\n\n  const { startDate, endDate } = getDateRange();\n\n  const { data: overview, isLoading: overviewLoading } = useQuery<AnalyticsOverview>({\n    queryKey: [`/api/analytics/overview?startDate=${startDate}&endDate=${endDate}`],\n  });\n\n  const { data: dailyMetrics, isLoading: dailyLoading } = useQuery<DailyMetric[]>({\n    queryKey: [\"/api/analytics/daily-metrics?days=30\"],\n  });\n\n  const { data: monthlyMetrics, isLoading: monthlyLoading } = useQuery<MonthlyMetric[]>({\n    queryKey: [\"/api/analytics/monthly-metrics?months=12\"],\n  });\n\n  const { data: activities, isLoading: activitiesLoading } = useQuery<ActivityTimeline[]>({\n    queryKey: [\"/api/analytics/activity-timeline?limit=20\"],\n  });\n\n  const { data: leadSources, isLoading: leadSourcesLoading } = useQuery<LeadSourceAnalysis[]>({\n    queryKey: [`/api/analytics/lead-source-analysis?startDate=${startDate}&endDate=${endDate}`],\n  });\n\n  const { data: plotPerformance, isLoading: plotLoading } = useQuery<PlotCategoryPerformance[]>({\n    queryKey: [\"/api/analytics/plot-category-performance\"],\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-slate-100 dark:from-slate-950 dark:via-blue-950 dark:to-slate-900 p-6\">\n      <div className=\"max-w-[1600px] mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-600 to-blue-800 dark:from-blue-400 dark:to-blue-600 bg-clip-text text-transparent\">\n              Analytics Dashboard\n            </h1>\n            <p className=\"text-slate-600 dark:text-slate-400 mt-1\">\n              Comprehensive team performance and business insights\n            </p>\n          </div>\n          <Select value={dateRange} onValueChange={setDateRange}>\n            <SelectTrigger className=\"w-[200px]\" data-testid=\"select-date-range\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"today\">Today</SelectItem>\n              <SelectItem value=\"this_week\">This Week</SelectItem>\n              <SelectItem value=\"this_month\">This Month</SelectItem>\n              <SelectItem value=\"last_3_months\">Last 3 Months</SelectItem>\n              <SelectItem value=\"last_6_months\">Last 6 Months</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {overviewLoading ? (\n            <>\n              {[...Array(8)].map((_, i) => (\n                <Card key={i}>\n                  <CardHeader className=\"pb-3\">\n                    <Skeleton className=\"h-4 w-24\" />\n                  </CardHeader>\n                  <CardContent>\n                    <Skeleton className=\"h-8 w-20\" />\n                  </CardContent>\n                </Card>\n              ))}\n            </>\n          ) : (\n            <>\n              <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950 dark:to-blue-900 border-blue-200 dark:border-blue-800\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                    <Users className=\"h-4 w-4\" />\n                    Total Leads\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"stat-total-leads\">\n                    {overview?.totalLeads || 0}\n                  </div>\n                  <p className=\"text-xs text-slate-600 dark:text-slate-400 mt-1\">\n                    {overview?.activeLeads || 0} active\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-green-50 to-green-100 dark:from-green-950 dark:to-green-900 border-green-200 dark:border-green-800\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                    <Target className=\"h-4 w-4\" />\n                    Conversions\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"stat-conversions\">\n                    {overview?.convertedLeads || 0}\n                  </div>\n                  <p className=\"text-xs text-slate-600 dark:text-slate-400 mt-1\">\n                    {overview?.conversionRate || \"0.00\"}% conversion rate\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-yellow-50 to-yellow-100 dark:from-yellow-950 dark:to-yellow-900 border-yellow-200 dark:border-yellow-800\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                    <DollarSign className=\"h-4 w-4\" />\n                    Revenue\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"stat-revenue\">\n                    ₹{(overview?.totalRevenue || 0).toLocaleString()}\n                  </div>\n                  <p className=\"text-xs text-slate-600 dark:text-slate-400 mt-1\">\n                    {overview?.totalBookings || 0} bookings\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-950 dark:to-purple-900 border-purple-200 dark:border-purple-800\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                    <Users className=\"h-4 w-4\" />\n                    Team Size\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"stat-team-size\">\n                    {overview?.totalSalespersons || 0}\n                  </div>\n                  <p className=\"text-xs text-slate-600 dark:text-slate-400 mt-1\">\n                    Active salespersons\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-pink-50 to-pink-100 dark:from-pink-950 dark:to-pink-900 border-pink-200 dark:border-pink-800\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                    <Phone className=\"h-4 w-4\" />\n                    Buyer Interests\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"stat-buyer-interests\">\n                    {overview?.totalBuyerInterests || 0}\n                  </div>\n                  <p className=\"text-xs text-slate-600 dark:text-slate-400 mt-1\">\n                    Total inquiries\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-indigo-50 to-indigo-100 dark:from-indigo-950 dark:to-indigo-900 border-indigo-200 dark:border-indigo-800\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                    <Activity className=\"h-4 w-4\" />\n                    Avg Response\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"stat-avg-response\">\n                    {overview?.avgResponseTime || 0}h\n                  </div>\n                  <p className=\"text-xs text-slate-600 dark:text-slate-400 mt-1\">\n                    Average response time\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-teal-50 to-teal-100 dark:from-teal-950 dark:to-teal-900 border-teal-200 dark:border-teal-800\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                    <TrendingUp className=\"h-4 w-4\" />\n                    Bookings\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"stat-bookings\">\n                    {overview?.totalBookings || 0}\n                  </div>\n                  <p className=\"text-xs text-slate-600 dark:text-slate-400 mt-1\">\n                    Completed bookings\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-950 dark:to-orange-900 border-orange-200 dark:border-orange-800\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                    <Award className=\"h-4 w-4\" />\n                    Success Rate\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"stat-success-rate\">\n                    {overview?.conversionRate || \"0.00\"}%\n                  </div>\n                  <p className=\"text-xs text-slate-600 dark:text-slate-400 mt-1\">\n                    Lead to booking\n                  </p>\n                </CardContent>\n              </Card>\n            </>\n          )}\n        </div>\n\n        {/* Charts Row */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Daily Trends Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5\" />\n                Daily Performance (Last 30 Days)\n              </CardTitle>\n              <CardDescription>Leads, conversions, and buyer interests</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {dailyLoading ? (\n                <Skeleton className=\"h-[300px] w-full\" />\n              ) : (\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={dailyMetrics}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"date\" \n                      tickFormatter={(value) => format(new Date(value), 'MMM dd')}\n                    />\n                    <YAxis />\n                    <Tooltip \n                      labelFormatter={(value) => format(new Date(value), 'MMM dd, yyyy')}\n                    />\n                    <Legend />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"leadsCreated\" \n                      stroke=\"#3b82f6\" \n                      name=\"Leads Created\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"conversions\" \n                      stroke=\"#10b981\" \n                      name=\"Conversions\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"buyerInterests\" \n                      stroke=\"#f59e0b\" \n                      name=\"Buyer Interests\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Monthly Revenue Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <DollarSign className=\"h-5 w-5\" />\n                Monthly Revenue & Conversions\n              </CardTitle>\n              <CardDescription>12-month trend analysis</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {monthlyLoading ? (\n                <Skeleton className=\"h-[300px] w-full\" />\n              ) : (\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={monthlyMetrics}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis yAxisId=\"left\" />\n                    <YAxis yAxisId=\"right\" orientation=\"right\" />\n                    <Tooltip />\n                    <Legend />\n                    <Bar \n                      yAxisId=\"left\"\n                      dataKey=\"revenue\" \n                      fill=\"#3b82f6\" \n                      name=\"Revenue (₹)\"\n                    />\n                    <Bar \n                      yAxisId=\"right\"\n                      dataKey=\"conversions\" \n                      fill=\"#10b981\" \n                      name=\"Conversions\"\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Lead Source Distribution */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Target className=\"h-5 w-5\" />\n                Lead Source Performance\n              </CardTitle>\n              <CardDescription>Conversion by source channel</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {leadSourcesLoading ? (\n                <Skeleton className=\"h-[300px] w-full\" />\n              ) : (\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={leadSources}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ source, totalLeads }) => `${source}: ${totalLeads}`}\n                      outerRadius={100}\n                      fill=\"#8884d8\"\n                      dataKey=\"totalLeads\"\n                    >\n                      {leadSources?.map((_: any, index: number) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Plot Category Performance */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-5 w-5\" />\n                Plot Category Performance\n              </CardTitle>\n              <CardDescription>Occupancy rates by category</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {plotLoading ? (\n                <Skeleton className=\"h-[300px] w-full\" />\n              ) : (\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={plotPerformance}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"category\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey=\"available\" stackId=\"a\" fill=\"#10b981\" name=\"Available\" />\n                    <Bar dataKey=\"booked\" stackId=\"a\" fill=\"#f59e0b\" name=\"Booked\" />\n                    <Bar dataKey=\"sold\" stackId=\"a\" fill=\"#ef4444\" name=\"Sold\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Activity Timeline */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Activity className=\"h-5 w-5\" />\n              Recent Activity Timeline\n            </CardTitle>\n            <CardDescription>Latest team actions and updates</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {activitiesLoading ? (\n              <div className=\"space-y-3\">\n                {[...Array(5)].map((_, i) => (\n                  <Skeleton key={i} className=\"h-16 w-full\" />\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-3 max-h-[400px] overflow-y-auto\">\n                {activities && activities.length > 0 ? (\n                  activities.map((activity) => (\n                    <div\n                      key={activity.id}\n                      className=\"flex items-start gap-3 p-3 rounded-lg bg-slate-50 dark:bg-slate-800 border border-slate-200 dark:border-slate-700\"\n                      data-testid={`activity-${activity.id}`}\n                    >\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"font-medium\">{activity.userDetails}</span>\n                          <Badge variant=\"outline\">{activity.action}</Badge>\n                        </div>\n                        <p className=\"text-sm text-slate-600 dark:text-slate-400 mt-1\">\n                          {activity.details}\n                        </p>\n                        <p className=\"text-xs text-slate-500 dark:text-slate-500 mt-1\">\n                          {format(new Date(activity.createdAt), 'PPp')}\n                        </p>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <p className=\"text-center text-slate-500 py-4\">No recent activities</p>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":19644},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { NotificationBell } from \"@/components/notification-bell\";\nimport { AuthProvider, useAuth } from \"@/lib/auth\";\nimport { ThemeProvider } from \"@/lib/theme\";\nimport { WebSocketProvider } from \"@/lib/websocket\";\nimport Login from \"@/pages/login\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport SalespersonDashboard from \"@/pages/salesperson-dashboard\";\nimport Leads from \"@/pages/leads\";\nimport Salespersons from \"@/pages/salespersons\";\nimport SalespersonPerformancePage from \"@/pages/salesperson-performance\";\nimport Analytics from \"@/pages/analytics\";\nimport Plots from \"@/pages/plots\";\nimport Settings from \"@/pages/settings\";\nimport NotFound from \"@/pages/not-found\";\nimport { useEffect } from \"react\";\n\nfunction ProtectedRoute({ component: Component }: { component: React.ComponentType }) {\n  const { isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isAuthenticated) {\n      setLocation(\"/login\");\n    }\n  }, [isAuthenticated, setLocation]);\n\n  if (!isAuthenticated) return null;\n\n  return <Component />;\n}\n\nfunction AdminRoute({ component: Component }: { component: React.ComponentType }) {\n  const { isAuthenticated, isAdmin } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isAuthenticated) {\n      setLocation(\"/login\");\n    } else if (!isAdmin) {\n      setLocation(\"/dashboard\");\n    }\n  }, [isAuthenticated, isAdmin, setLocation]);\n\n  if (!isAuthenticated || !isAdmin) return null;\n\n  return <Component />;\n}\n\nfunction DashboardRoute() {\n  const { user } = useAuth();\n  return user?.role === \"admin\" ? <AdminDashboard /> : <SalespersonDashboard />;\n}\n\nfunction Router() {\n  const { isAuthenticated, isAdmin } = useAuth();\n\n  if (!isAuthenticated) {\n    return (\n      <Switch>\n        <Route path=\"/login\" component={Login} />\n        <Route component={Login} />\n      </Switch>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/dashboard\" component={() => <ProtectedRoute component={DashboardRoute} />} />\n      <Route path=\"/leads\" component={() => <ProtectedRoute component={Leads} />} />\n      <Route path=\"/analytics\" component={() => <AdminRoute component={Analytics} />} />\n      <Route path=\"/performance\" component={() => <AdminRoute component={SalespersonPerformancePage} />} />\n      <Route path=\"/salespersons\" component={() => <AdminRoute component={Salespersons} />} />\n      <Route path=\"/plots\" component={() => <ProtectedRoute component={Plots} />} />\n      <Route path=\"/settings\" component={() => <ProtectedRoute component={Settings} />} />\n      <Route path=\"/\" component={() => <ProtectedRoute component={DashboardRoute} />} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <AuthProvider>\n          <WebSocketProvider>\n            <TooltipProvider>\n              <AppContent style={style} />\n              <Toaster />\n            </TooltipProvider>\n          </WebSocketProvider>\n        </AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nfunction AppContent({ style }: { style: any }) {\n  const { isAuthenticated, isAdmin } = useAuth();\n  const [location] = useLocation();\n\n  if (!isAuthenticated || location === \"/login\") {\n    return <Router />;\n  }\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <div className=\"flex flex-col flex-1 overflow-hidden\">\n          <header className=\"flex items-center justify-between px-6 py-3 border-b border-border bg-background sticky top-0 z-10\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n            <div className=\"flex items-center gap-2\">\n              {!isAdmin && <NotificationBell />}\n              <ThemeToggle />\n            </div>\n          </header>\n          <main className=\"flex-1 overflow-y-auto p-6 bg-background\">\n            <Router />\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n","size_bytes":4647},"client/src/components/stat-card.tsx":{"content":"import { LucideIcon } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  trend?: {\n    value: number;\n    isPositive: boolean;\n  };\n  gradient?: string;\n  delay?: number;\n}\n\nexport function StatCard({ title, value, icon: Icon, trend, gradient = \"from-primary to-primary/80\" }: StatCardProps) {\n  return (\n    <div>\n      <Card className=\"overflow-hidden hover-elevate\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium text-muted-foreground\">{title}</p>\n              <p className=\"text-3xl font-bold text-foreground mt-2\">\n                {value}\n              </p>\n              {trend && (\n                <p className={`text-xs mt-2 ${trend.isPositive ? \"text-chart-3\" : \"text-destructive\"}`}>\n                  {trend.isPositive ? \"↑\" : \"↓\"} {Math.abs(trend.value)}% from last month\n                </p>\n              )}\n            </div>\n            <div className={`flex h-12 w-12 items-center justify-center rounded-lg bg-gradient-to-br ${gradient} shadow-lg`}>\n              <Icon className=\"h-6 w-6 text-white\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1375},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 220 10% 20%;\n\n  --border: 220 8% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 220 10% 20%;\n\n  --card-border: 220 8% 93%;\n\n  --sidebar: 220 5% 96%;\n\n  --sidebar-foreground: 220 10% 22%;\n\n  --sidebar-border: 220 8% 90%;\n\n  --sidebar-primary: 220 80% 45%;\n\n  --sidebar-primary-foreground: 220 80% 98%;\n\n  --sidebar-accent: 220 10% 92%;\n\n  --sidebar-accent-foreground: 220 10% 20%;\n\n  --sidebar-ring: 220 80% 45%;\n\n  --popover: 220 5% 94%;\n\n  --popover-foreground: 220 10% 20%;\n\n  --popover-border: 220 8% 87%;\n\n  --primary: 220 80% 45%;\n\n  --primary-foreground: 220 80% 98%;\n\n  --secondary: 220 8% 90%;\n\n  --secondary-foreground: 220 10% 20%;\n\n  --muted: 220 12% 91%;\n\n  --muted-foreground: 220 10% 45%;\n\n  --accent: 45 90% 55%;\n\n  --accent-foreground: 0 0% 100%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 84% 98%;\n\n  --input: 220 10% 75%;\n  --ring: 220 80% 45%;\n  --chart-1: 220 80% 40%;\n  --chart-2: 45 90% 50%;\n  --chart-3: 142 76% 36%;\n  --chart-4: 45 93% 47%;\n  --chart-5: 0 84% 55%;\n\n  --font-sans: Inter, Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 15% 25% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 15% 25% / 0.10);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 15% 25% / 0.06), 0px 1px 2px -1px hsl(220 15% 25% / 0.10);\n  --shadow: 0px 4px 6px -1px hsl(220 15% 25% / 0.08), 0px 2px 4px -2px hsl(220 15% 25% / 0.05);\n  --shadow-md: 0px 6px 12px -2px hsl(220 15% 25% / 0.12), 0px 3px 7px -3px hsl(220 15% 25% / 0.08);\n  --shadow-lg: 0px 10px 20px -4px hsl(220 15% 25% / 0.15), 0px 4px 10px -4px hsl(220 15% 25% / 0.10);\n  --shadow-xl: 0px 20px 30px -6px hsl(220 15% 25% / 0.18), 0px 8px 16px -6px hsl(220 15% 25% / 0.12);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 15% 25% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 8%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 220 12% 18%;\n\n  --card: 220 15% 12%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 220 12% 20%;\n\n  --sidebar: 220 15% 10%;\n\n  --sidebar-foreground: 0 0% 93%;\n\n  --sidebar-border: 220 12% 16%;\n\n  --sidebar-primary: 220 80% 60%;\n\n  --sidebar-primary-foreground: 220 80% 98%;\n\n  --sidebar-accent: 220 15% 16%;\n\n  --sidebar-accent-foreground: 0 0% 93%;\n\n  --sidebar-ring: 220 80% 60%;\n\n  --popover: 220 15% 14%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 220 12% 22%;\n\n  --primary: 220 80% 60%;\n\n  --primary-foreground: 220 80% 98%;\n\n  --secondary: 220 12% 20%;\n\n  --secondary-foreground: 0 0% 95%;\n\n  --muted: 220 15% 18%;\n\n  --muted-foreground: 0 0% 70%;\n\n  --accent: 45 90% 65%;\n\n  --accent-foreground: 45 10% 15%;\n\n  --destructive: 0 84% 70%;\n\n  --destructive-foreground: 0 84% 98%;\n\n  --input: 220 12% 35%;\n  --ring: 220 80% 60%;\n  --chart-1: 220 80% 65%;\n  --chart-2: 45 90% 65%;\n  --chart-3: 142 76% 50%;\n  --chart-4: 45 93% 60%;\n  --chart-5: 0 84% 70%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.40);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.45);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.50), 0px 1px 2px -1px hsl(0 0% 0% / 0.40);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.55), 0px 2px 4px -2px hsl(0 0% 0% / 0.45);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.60), 0px 3px 7px -3px hsl(0 0% 0% / 0.50);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.65), 0px 4px 10px -4px hsl(0 0% 0% / 0.55);\n  --shadow-xl: 0px 20px 30px -6px hsl(0 0% 0% / 0.70), 0px 8px 16px -6px hsl(0 0% 0% / 0.60);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.75);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11223},"client/src/components/app-sidebar.tsx":{"content":"import { Home, Users, Building2, ClipboardList, Settings, LogOut, User, BarChart3, LineChart } from \"lucide-react\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useLocation, Link } from \"wouter\";\n\nexport function AppSidebar() {\n  const { user, logout, isAdmin } = useAuth();\n  const [location] = useLocation();\n\n  const adminItems = [\n    { title: \"Dashboard\", url: \"/dashboard\", icon: Home },\n    { title: \"Leads\", url: \"/leads\", icon: ClipboardList },\n    { title: \"Analytics\", url: \"/analytics\", icon: LineChart },\n    { title: \"Performance\", url: \"/performance\", icon: BarChart3 },\n    { title: \"Credentials\", url: \"/salespersons\", icon: Users },\n    { title: \"Projects & Plots\", url: \"/plots\", icon: Building2 },\n    { title: \"Settings\", url: \"/settings\", icon: Settings },\n  ];\n\n  const salespersonItems = [\n    { title: \"Dashboard\", url: \"/dashboard\", icon: Home },\n    { title: \"My Leads\", url: \"/leads\", icon: ClipboardList },\n    { title: \"Plots\", url: \"/plots\", icon: Building2 },\n  ];\n\n  const items = isAdmin ? adminItems : salespersonItems;\n\n  return (\n    <Sidebar>\n      <SidebarContent className=\"pt-6\">\n        <div className=\"px-6 pb-4\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-gradient-to-br from-primary to-accent\">\n              <Building2 className=\"h-5 w-5 text-white\" />\n            </div>\n            <div>\n              <h2 className=\"text-lg font-bold text-sidebar-foreground\">Plot CRM</h2>\n              <p className=\"text-xs text-muted-foreground capitalize\">{user?.role}</p>\n            </div>\n          </div>\n        </div>\n\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {items.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton\n                    asChild\n                    isActive={location === item.url}\n                    data-testid={`link-${item.title.toLowerCase().replace(/\\s+/g, \"-\")}`}\n                  >\n                    <Link href={item.url} className=\"flex items-center gap-3\">\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n\n      <SidebarFooter className=\"p-4\">\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <div className=\"flex items-center gap-3 rounded-lg bg-sidebar-accent p-3\">\n              <div className=\"flex h-8 w-8 items-center justify-center rounded-full bg-primary text-primary-foreground\">\n                <User className=\"h-4 w-4\" />\n              </div>\n              <div className=\"flex-1 overflow-hidden\">\n                <p className=\"text-sm font-medium text-sidebar-foreground truncate\">{user?.name}</p>\n                <p className=\"text-xs text-muted-foreground truncate\">{user?.email}</p>\n              </div>\n            </div>\n          </SidebarMenuItem>\n          <SidebarMenuItem>\n            <SidebarMenuButton onClick={logout} data-testid=\"button-logout\" className=\"w-full\">\n              <LogOut className=\"h-4 w-4\" />\n              <span>Logout</span>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":3738},"replit.md":{"content":"# Plot Management CRM\n\n## Overview\nThis is a full-featured Plot Management CRM web application for real estate businesses. It manages leads, salespersons, projects, plots, bookings, and payments. The application features a modern UI with a blue-gold color scheme, glassmorphism effects, and supports role-based access control for Admin and Salesperson roles, each with distinct dashboards and capabilities. The business vision is to provide a comprehensive tool for real estate management, enhancing efficiency in lead conversion, project oversight, and sales team performance.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework & Build Tool**: React 18 with TypeScript, Vite for fast development.\n- **Routing**: Wouter for lightweight client-side routing.\n- **UI Component System**: ShadCN/UI (built on Radix UI) and Tailwind CSS for styling, adhering to Material Design principles with a blue-gold brand. Features include responsive, mobile-first design, glassmorphism effects, and light/dark mode.\n- **State Management**: TanStack Query for server state, React Context API for authentication and theme, React Hook Form with Zod for form handling and validation.\n\n### Backend Architecture\n- **Server Framework**: Express.js with TypeScript on Node.js, implementing a RESTful API.\n- **Authentication & Authorization**: JWT for stateless authentication (stored in localStorage), bcryptjs for password hashing, custom middleware for role-based access control (Admin/Salesperson).\n- **API Architecture**: Organized route handlers, middleware for authentication (`authenticateToken`) and admin-only routes (`requireAdmin`), and Zod schemas for request validation.\n\n### Data Storage\n- **Database**: MongoDB with Mongoose ODM for schema-based data modeling.\n- **Data Models**:\n    - **User**: Admin and salesperson accounts.\n    - **Lead**: Customer leads with contact info, status, rating (Urgent/High/Low), source, classification (Inquiry/Important), salesperson assignment, and assignedBy tracking.\n    - **Project**: Real estate projects.\n    - **Plot**: Individual plots with details like size, price, status (Available/Booked/Hold/Sold), and category.\n    - **BuyerInterest**: Tracks potential buyers for plots, including offered price and assigned salesperson.\n    - **Payment**: Booking payments with amount, mode, and type.\n    - **CallLog**: Records salesperson call activities with lead details, call status (Interested/Not Interested/Call Back/Meeting Scheduled), duration, notes, and next follow-up date.\n    - **ActivityLog**: Audit trail of user actions.\n- **Schema Design**: TypeScript interfaces and Zod validation schemas shared between frontend and backend.\n\n### System Design Choices\n- **Real-Time Updates**: WebSocket implementation with JWT authentication for instant data synchronization across all connected clients. Uses SESSION_SECRET environment variable with fail-fast security validation. Automatic query cache invalidation ensures UI updates without page refreshes.\n- **Login Experience**: Professional background image showing plots and buildings with semi-transparent overlay for improved visual appeal.\n- **Simple Dashboards**: Clean, focused dashboards showing essential metrics only. Admin dashboard displays core business stats (leads, conversions, available plots, revenue) with quick stats overview. Salesperson dashboard shows assigned leads, follow-ups, conversions, and revenue with today's follow-up list.\n- **Salesperson Performance**: Dedicated `/performance` page with clean cards showing key metrics per salesperson including leads assigned, conversions, conversion rate, buyer interests added, and revenue. Clicking on a salesperson card displays their detailed call activity history with lead information, call status, notes, and follow-up dates.\n- **Projects & Plots Management**: Hierarchical table structure for projects, showing plot details, buyer interest counts, highest offers, and assigned salespersons. Category-based plot filtering (Investment Plot, Bungalow Plot, Residential Plot, Commercial Plot, Open Plot).\n- **Lead Management**: Enhanced lead creation and editing forms with:\n  - Lead classification system (Inquiry vs Important) to help prioritize leads\n  - Project/plot interest capture with optional highest offer\n  - Salesperson assignment tracking with \"Added By\" column showing which salesperson created each lead\n  - Classification badges (blue for Inquiry, orange for Important) in leads table\n  - Admin-only visibility of \"Added By\" column for oversight and tracking\n  - Integration of LeadInterest with BuyerInterest for comprehensive tracking\n- **Call Logging System**: Salespersons can log call activities for assigned leads with call status, notes, and next follow-up dates. Duration field is optional. When logging a call with a next follow-up date, the lead's follow-up date is automatically updated.\n- **Notification System**: Real-time notification bell for salespersons showing missed follow-ups. Badge displays count of overdue leads, dropdown shows detailed list with lead information. Notifications refresh every minute and clear on logout.\n- **Analytics Dashboard**: Comprehensive analytics section for admin users with crisp, business-focused visualizations:\n  - Overview metrics cards showing conversion rate, total revenue, active leads, and average response time\n  - Daily and monthly performance charts tracking leads, conversions, and revenue trends\n  - Lead source distribution analysis showing channel effectiveness\n  - Plot category performance metrics\n  - Recent activity timeline for monitoring business operations\n  - Date range filtering (Today, This Week, This Month, Last 3/6 Months)\n  - Export functionality for analytics data (CSV/Excel)\n  - Secure admin-only access with explicit role checking and automatic redirects\n  - Separated from team performance tracking for clarity - team member details are in the dedicated Performance section\n- **Navigation Structure**: Admin navigation includes Dashboard, Leads, Analytics, Performance, Credentials, Projects & Plots, and Settings. Salesperson navigation shows Dashboard, My Leads, and Plots only.\n- **Data Export**: CSV/Excel export functionality for filtered lead data and analytics reports.\n\n## External Dependencies\n\n### Database Service\n- **MongoDB**: NoSQL database. Requires `MONGODB_URI` environment variable.\n\n### Third-Party Libraries\n- **Google Fonts**: Inter (primary) and JetBrains Mono (monospace).\n- **Radix UI**: Accessible UI component primitives.\n- **date-fns**: Date manipulation utilities.\n- **Heroicons** (via Lucide React): Icon system.\n\n### Development Tools\n- **Drizzle Kit**: Configured but not actively used with MongoDB.\n- **ESBuild**: Bundler for backend production builds.\n- **TSX**: TypeScript execution for development server.\n\n### Deployment Requirements\n- **Environment Variables**: `MONGODB_URI`, `SESSION_SECRET`, `NODE_ENV`.\n- **Build Process**: `vite build` for frontend, `esbuild` for backend.","size_bytes":7071},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { createServer } from \"http\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { connectDB } from \"./db\";\nimport { seedDatabase } from \"./seed\";\nimport { setupWebSocket } from \"./websocket\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Connect to MongoDB\n  await connectDB();\n  // await seedDatabase(); // Commented out to preserve October 2025 data\n  \n  const server = createServer(app);\n  \n  setupWebSocket(server);\n  \n  registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen(port, \"0.0.0.0\", () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2493},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/salesperson-performance-card.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { SalespersonPerformance, CustomerContactDetail } from \"@shared/schema\";\nimport { format } from \"date-fns\";\nimport { Users, TrendingUp, Phone, Target, Eye, ChevronDown, ChevronUp } from \"lucide-react\";\n\ninterface SalespersonPerformanceCardProps {\n  person: SalespersonPerformance;\n}\n\nexport function SalespersonPerformanceCard({ person }: SalespersonPerformanceCardProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [showContacts, setShowContacts] = useState(false);\n\n  const { data: contacts, isLoading: contactsLoading } = useQuery<CustomerContactDetail[]>({\n    queryKey: [`/api/analytics/customer-contacts/${person.id}`],\n    enabled: showContacts,\n  });\n\n  const conversionFunnelData = [\n    { label: \"Approached\", count: person.approached, color: \"bg-blue-500\" },\n    { label: \"Contacted\", count: person.contacted, color: \"bg-purple-500\" },\n    { label: \"Interested\", count: person.interested, color: \"bg-yellow-500\" },\n    { label: \"Site Visits\", count: person.siteVisits, color: \"bg-orange-500\" },\n    { label: \"Converted\", count: person.conversions, color: \"bg-green-500\" },\n    { label: \"Lost\", count: person.lost, color: \"bg-red-500\" },\n  ];\n\n  return (\n    <Card className=\"hover:shadow-lg transition-shadow\" data-testid={`card-salesperson-${person.id}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"flex h-12 w-12 items-center justify-center rounded-full bg-gradient-to-br from-blue-500 to-blue-700 text-white font-bold text-lg\">\n              {person.name.charAt(0)}\n            </div>\n            <div>\n              <CardTitle className=\"text-lg\" data-testid={`text-name-${person.id}`}>{person.name}</CardTitle>\n              <p className=\"text-sm text-muted-foreground\" data-testid={`text-email-${person.id}`}>{person.email}</p>\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setIsExpanded(!isExpanded)}\n            data-testid={`button-expand-${person.id}`}\n          >\n            {isExpanded ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"space-y-1\">\n            <p className=\"text-xs text-muted-foreground\">Leads Assigned</p>\n            <p className=\"text-2xl font-bold\" data-testid={`stat-assigned-${person.id}`}>{person.leadsAssigned}</p>\n          </div>\n          <div className=\"space-y-1\">\n            <p className=\"text-xs text-muted-foreground\">Conversions</p>\n            <p className=\"text-2xl font-bold text-green-600 dark:text-green-400\" data-testid={`stat-conversions-${person.id}`}>\n              {person.conversions}\n            </p>\n          </div>\n          <div className=\"space-y-1\">\n            <p className=\"text-xs text-muted-foreground\">Conversion Rate</p>\n            <Badge \n              variant={person.conversionRate > 30 ? \"default\" : \"secondary\"}\n              className={person.conversionRate > 30 ? \"bg-green-500\" : person.conversionRate > 15 ? \"bg-yellow-500\" : \"\"}\n              data-testid={`badge-rate-${person.id}`}\n            >\n              {person.conversionRate}%\n            </Badge>\n          </div>\n          <div className=\"space-y-1\">\n            <p className=\"text-xs text-muted-foreground\">Revenue</p>\n            <p className=\"text-xl font-bold\" data-testid={`stat-revenue-${person.id}`}>\n              ₹{(person.revenue / 100000).toFixed(1)}L\n            </p>\n          </div>\n        </div>\n\n        {isExpanded && (\n          <div className=\"space-y-4 pt-4 border-t\">\n            <Tabs defaultValue=\"daily\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"daily\" data-testid={`tab-daily-${person.id}`}>Daily</TabsTrigger>\n                <TabsTrigger value=\"weekly\" data-testid={`tab-weekly-${person.id}`}>Weekly</TabsTrigger>\n                <TabsTrigger value=\"monthly\" data-testid={`tab-monthly-${person.id}`}>Monthly</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"daily\" className=\"space-y-3\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                  <MetricCard icon={Users} label=\"Approached\" value={person.dailyMetrics.approached} color=\"text-blue-500\" />\n                  <MetricCard icon={Phone} label=\"Contacted\" value={person.dailyMetrics.contacted} color=\"text-purple-500\" />\n                  <MetricCard icon={TrendingUp} label=\"Interested\" value={person.dailyMetrics.interested} color=\"text-yellow-500\" />\n                  <MetricCard icon={Target} label=\"Converted\" value={person.dailyMetrics.conversions} color=\"text-green-500\" />\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"weekly\" className=\"space-y-3\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                  <MetricCard icon={Users} label=\"Approached\" value={person.weeklyMetrics.approached} color=\"text-blue-500\" />\n                  <MetricCard icon={Phone} label=\"Contacted\" value={person.weeklyMetrics.contacted} color=\"text-purple-500\" />\n                  <MetricCard icon={TrendingUp} label=\"Interested\" value={person.weeklyMetrics.interested} color=\"text-yellow-500\" />\n                  <MetricCard icon={Target} label=\"Converted\" value={person.weeklyMetrics.conversions} color=\"text-green-500\" />\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"monthly\" className=\"space-y-3\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                  <MetricCard icon={Users} label=\"Approached\" value={person.monthlyMetrics.approached} color=\"text-blue-500\" />\n                  <MetricCard icon={Phone} label=\"Contacted\" value={person.monthlyMetrics.contacted} color=\"text-purple-500\" />\n                  <MetricCard icon={TrendingUp} label=\"Interested\" value={person.monthlyMetrics.interested} color=\"text-yellow-500\" />\n                  <MetricCard icon={Target} label=\"Converted\" value={person.monthlyMetrics.conversions} color=\"text-green-500\" />\n                </div>\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"space-y-3\">\n              <h4 className=\"font-semibold text-sm\">Conversion Funnel</h4>\n              <div className=\"space-y-2\">\n                {conversionFunnelData.map((item) => (\n                  <div key={item.label} className=\"space-y-1\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">{item.label}</span>\n                      <span className=\"font-medium\">{item.count}</span>\n                    </div>\n                    <Progress \n                      value={person.leadsAssigned > 0 ? (item.count / person.leadsAssigned) * 100 : 0} \n                      className={`h-2 ${item.color}`}\n                    />\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <Dialog open={showContacts} onOpenChange={setShowContacts}>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\" className=\"w-full\" data-testid={`button-view-contacts-${person.id}`}>\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  View Customer Contacts\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>Customer Contacts - {person.name}</DialogTitle>\n                  <DialogDescription>\n                    View all customers contacted by this salesperson\n                  </DialogDescription>\n                </DialogHeader>\n                {contactsLoading ? (\n                  <div className=\"flex justify-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                  </div>\n                ) : contacts && contacts.length > 0 ? (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Name</TableHead>\n                        <TableHead>Phone</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Rating</TableHead>\n                        <TableHead>Source</TableHead>\n                        <TableHead>Last Contact</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {contacts.map((contact) => (\n                        <TableRow key={contact.id} data-testid={`row-contact-${contact.id}`}>\n                          <TableCell className=\"font-medium\">{contact.name}</TableCell>\n                          <TableCell>{contact.phone}</TableCell>\n                          <TableCell>\n                            <Badge variant=\"outline\">{contact.status}</Badge>\n                          </TableCell>\n                          <TableCell>\n                            <Badge \n                              className={\n                                contact.rating === \"Urgent\" \n                                  ? \"bg-red-500\" \n                                  : contact.rating === \"High\" \n                                  ? \"bg-yellow-500\" \n                                  : \"bg-blue-500\"\n                              }\n                            >\n                              {contact.rating}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>{contact.source}</TableCell>\n                          <TableCell className=\"text-sm\">\n                            {format(new Date(contact.lastContactDate), 'PP')}\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                ) : (\n                  <p className=\"text-center py-8 text-muted-foreground\">No contacts found</p>\n                )}\n              </DialogContent>\n            </Dialog>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction MetricCard({ icon: Icon, label, value, color }: { icon: any; label: string; value: number; color: string }) {\n  return (\n    <div className=\"space-y-1 p-3 rounded-lg border bg-card\">\n      <div className=\"flex items-center gap-2\">\n        <Icon className={`h-4 w-4 ${color}`} />\n        <p className=\"text-xs text-muted-foreground\">{label}</p>\n      </div>\n      <p className=\"text-xl font-bold\">{value}</p>\n    </div>\n  );\n}\n","size_bytes":11553},"client/src/components/notification-bell.tsx":{"content":"import { Bell } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/lib/auth\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { format } from \"date-fns\";\nimport type { Lead } from \"@shared/schema\";\nimport { Link } from \"wouter\";\n\nexport function NotificationBell() {\n  const { user, isAuthenticated } = useAuth();\n  \n  const { data: missedFollowUps = [], isLoading } = useQuery<Lead[]>({\n    queryKey: [\"/api/missed-followups\"],\n    refetchInterval: 60000, // Refetch every minute\n    enabled: isAuthenticated && !!user, // Only fetch when authenticated\n  });\n\n  const count = missedFollowUps.length;\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"relative\"\n          data-testid=\"button-notifications\"\n        >\n          <Bell className=\"h-5 w-5\" />\n          {count > 0 && (\n            <Badge\n              variant=\"destructive\"\n              className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs\"\n              data-testid=\"badge-notification-count\"\n            >\n              {count}\n            </Badge>\n          )}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-80\">\n        <DropdownMenuLabel>Missed Follow-ups</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        {isLoading ? (\n          <div className=\"p-4 text-center text-sm text-muted-foreground\">\n            Loading...\n          </div>\n        ) : count === 0 ? (\n          <div className=\"p-4 text-center text-sm text-muted-foreground\">\n            No missed follow-ups\n          </div>\n        ) : (\n          <div className=\"max-h-[400px] overflow-y-auto\">\n            {missedFollowUps.map((lead) => (\n              <DropdownMenuItem\n                key={lead._id}\n                asChild\n                className=\"cursor-pointer\"\n                data-testid={`notification-lead-${lead._id}`}\n              >\n                <Link href=\"/leads\" className=\"flex flex-col items-start gap-1 p-3\">\n                  <div className=\"flex items-center justify-between w-full\">\n                    <span className=\"font-medium\">{lead.name}</span>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {lead.rating}\n                    </Badge>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {lead.phone}\n                  </div>\n                  <div className=\"text-xs text-destructive\">\n                    Follow-up: {lead.followUpDate ? format(new Date(lead.followUpDate), 'PP') : 'N/A'}\n                  </div>\n                </Link>\n              </DropdownMenuItem>\n            ))}\n          </div>\n        )}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n","size_bytes":3119},"server/websocket.ts":{"content":"import { WebSocketServer, WebSocket } from \"ws\";\nimport { Server } from \"http\";\nimport { log } from \"./vite\";\nimport type { IncomingMessage } from \"http\";\nimport jwt from \"jsonwebtoken\";\n\nlet wss: WebSocketServer | null = null;\n\nconst JWT_SECRET = process.env.SESSION_SECRET;\n\nif (!JWT_SECRET) {\n  throw new Error(\"SESSION_SECRET environment variable is required\");\n}\n\nexport function setupWebSocket(server: Server) {\n  wss = new WebSocketServer({ noServer: true });\n\n  server.on(\"upgrade\", (request: IncomingMessage, socket, head) => {\n    const { pathname, searchParams } = new URL(request.url!, `http://${request.headers.host}`);\n    \n    if (pathname === \"/ws\") {\n      const token = searchParams.get(\"token\") || \n                     request.headers.authorization?.replace(\"Bearer \", \"\");\n\n      if (!token) {\n        socket.write(\"HTTP/1.1 401 Unauthorized\\r\\n\\r\\n\");\n        socket.destroy();\n        return;\n      }\n\n      try {\n        jwt.verify(token, JWT_SECRET!);\n        \n        wss!.handleUpgrade(request, socket, head, (ws) => {\n          wss!.emit(\"connection\", ws, request);\n        });\n      } catch (error) {\n        socket.write(\"HTTP/1.1 401 Unauthorized\\r\\n\\r\\n\");\n        socket.destroy();\n      }\n    }\n  });\n\n  wss.on(\"connection\", (ws: WebSocket) => {\n    log(\"WebSocket client connected\");\n\n    ws.on(\"close\", () => {\n      log(\"WebSocket client disconnected\");\n    });\n\n    ws.on(\"error\", (error) => {\n      console.error(\"WebSocket error:\", error);\n    });\n\n    ws.send(JSON.stringify({ type: \"connected\", message: \"Connected to real-time updates\" }));\n  });\n\n  log(\"WebSocket server initialized on path /ws\");\n  return wss;\n}\n\nexport function broadcastUpdate(event: string, data: any) {\n  if (!wss) {\n    return;\n  }\n\n  const message = JSON.stringify({\n    type: event,\n    data,\n    timestamp: new Date().toISOString(),\n  });\n\n  wss.clients.forEach((client) => {\n    if (client.readyState === WebSocket.OPEN) {\n      client.send(message);\n    }\n  });\n}\n\nexport const wsEvents = {\n  LEAD_CREATED: \"lead:created\",\n  LEAD_UPDATED: \"lead:updated\",\n  LEAD_DELETED: \"lead:deleted\",\n  LEAD_ASSIGNED: \"lead:assigned\",\n  \n  CALL_LOG_CREATED: \"callLog:created\",\n  \n  PLOT_CREATED: \"plot:created\",\n  PLOT_UPDATED: \"plot:updated\",\n  PLOT_DELETED: \"plot:deleted\",\n  \n  PAYMENT_CREATED: \"payment:created\",\n  \n  BUYER_INTEREST_CREATED: \"buyerInterest:created\",\n  BUYER_INTEREST_UPDATED: \"buyerInterest:updated\",\n  \n  LEAD_INTEREST_CREATED: \"leadInterest:created\",\n  \n  ACTIVITY_LOGGED: \"activity:logged\",\n  \n  METRICS_UPDATED: \"metrics:updated\",\n};\n","size_bytes":2567},"client/src/lib/websocket.tsx":{"content":"import { createContext, useContext, useEffect, useRef, useState } from \"react\";\nimport { queryClient } from \"./queryClient\";\n\ninterface WebSocketContextType {\n  isConnected: boolean;\n  lastMessage: any;\n}\n\nconst WebSocketContext = createContext<WebSocketContextType>({\n  isConnected: false,\n  lastMessage: null,\n});\n\nexport function useWebSocket() {\n  return useContext(WebSocketContext);\n}\n\nexport function WebSocketProvider({ children }: { children: React.ReactNode }) {\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<any>(null);\n  const wsRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\n\n  const connect = () => {\n    const token = localStorage.getItem(\"token\");\n    if (!token) {\n      console.log(\"No authentication token found, skipping WebSocket connection\");\n      return;\n    }\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws?token=${encodeURIComponent(token)}`;\n\n    try {\n      const ws = new WebSocket(wsUrl);\n      wsRef.current = ws;\n\n      ws.onopen = () => {\n        console.log(\"WebSocket connected\");\n        setIsConnected(true);\n      };\n\n      ws.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data);\n          setLastMessage(message);\n          handleWebSocketMessage(message);\n        } catch (error) {\n          console.error(\"Failed to parse WebSocket message:\", error);\n        }\n      };\n\n      ws.onerror = (error) => {\n        console.error(\"WebSocket error:\", error);\n      };\n\n      ws.onclose = () => {\n        console.log(\"WebSocket disconnected\");\n        setIsConnected(false);\n        wsRef.current = null;\n\n        reconnectTimeoutRef.current = setTimeout(() => {\n          console.log(\"Attempting to reconnect WebSocket...\");\n          connect();\n        }, 3000);\n      };\n    } catch (error) {\n      console.error(\"Failed to create WebSocket connection:\", error);\n    }\n  };\n\n  useEffect(() => {\n    connect();\n\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, []);\n\n  return (\n    <WebSocketContext.Provider value={{ isConnected, lastMessage }}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n}\n\nfunction handleWebSocketMessage(message: any) {\n  if (!message.type) return;\n\n  console.log(\"WebSocket message received:\", message.type, message.data);\n\n  switch (message.type) {\n    case \"lead:created\":\n    case \"lead:updated\":\n    case \"lead:deleted\":\n    case \"lead:assigned\":\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/salesperson\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/salesperson/detailed\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads/today-followups\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/missed-followups\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads/contacted\"] });\n      break;\n\n    case \"callLog:created\":\n      if (message.data?.leadId) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/call-logs/lead\", message.data.leadId] });\n      }\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/salesperson\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/salesperson/detailed\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads/contacted\"] });\n      break;\n\n    case \"plot:created\":\n    case \"plot:updated\":\n    case \"plot:deleted\":\n      queryClient.invalidateQueries({ queryKey: [\"/api/plots\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      break;\n\n    case \"payment:created\":\n      queryClient.invalidateQueries({ queryKey: [\"/api/payments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/plots\"] });\n      break;\n\n    case \"buyerInterest:created\":\n    case \"buyerInterest:updated\":\n      if (message.data?.plotId) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/buyer-interests/plot\", message.data.plotId] });\n      }\n      queryClient.invalidateQueries({ queryKey: [\"/api/plots\"] });\n      break;\n\n    case \"leadInterest:created\":\n      if (message.data?.leadId) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/lead-interests/lead\", message.data.leadId] });\n      }\n      if (message.data?.projectId) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/lead-interests/project\", message.data.projectId] });\n      }\n      queryClient.invalidateQueries({ queryKey: [\"/api/plots\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      break;\n\n    case \"activity:logged\":\n      queryClient.invalidateQueries({ queryKey: [\"/api/activity-logs\"] });\n      break;\n\n    case \"metrics:updated\":\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/salesperson\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/salesperson/detailed\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics\"] });\n      break;\n\n    default:\n      break;\n  }\n}\n","size_bytes":5673},"client/src/pages/salesperson-performance.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Users, Award, TrendingUp, DollarSign, Phone, ArrowLeft } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { format } from \"date-fns\";\nimport type { SalespersonPerformance, CallLog } from \"@shared/schema\";\n\nexport default function SalespersonPerformancePage() {\n  const [selectedSalesperson, setSelectedSalesperson] = useState<SalespersonPerformance | null>(null);\n\n  const { data: salespersonPerformance, isLoading } = useQuery<SalespersonPerformance[]>({\n    queryKey: [\"/api/analytics/salesperson-performance\"],\n  });\n\n  const { data: callLogs, isLoading: callLogsLoading } = useQuery<CallLog[]>({\n    queryKey: [`/api/analytics/customer-contacts/${selectedSalesperson?.id}`],\n    enabled: !!selectedSalesperson,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (selectedSalesperson) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center gap-4\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setSelectedSalesperson(null)}\n            data-testid=\"button-back-to-performance\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">{selectedSalesperson.name}'s Call Logs</h1>\n            <p className=\"text-muted-foreground mt-1\">View all customer contacts and call activities</p>\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Phone className=\"h-5 w-5\" />\n              Call Activity History\n            </CardTitle>\n            <CardDescription>All calls made to leads by {selectedSalesperson.name}</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {callLogsLoading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n              </div>\n            ) : callLogs && callLogs.length > 0 ? (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Lead</TableHead>\n                      <TableHead>Call Status</TableHead>\n                      <TableHead>Notes</TableHead>\n                      <TableHead>Next Follow-up</TableHead>\n                      <TableHead>Date</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {callLogs.map((log) => (\n                      <TableRow key={log._id} data-testid={`call-log-${log._id}`}>\n                        <TableCell className=\"font-medium\">\n                          {(log.leadId as any)?.name || (log.leadId as any)?.phone || 'N/A'}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={\n                              log.callStatus === \"Interested\" || log.callStatus === \"Meeting Scheduled\" \n                                ? \"default\" \n                                : log.callStatus === \"Not Interested\"\n                                ? \"destructive\"\n                                : \"secondary\"\n                            }\n                          >\n                            {log.callStatus}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"max-w-xs truncate\">\n                          {log.notes || '-'}\n                        </TableCell>\n                        <TableCell>\n                          {log.nextFollowUpDate \n                            ? (() => {\n                                try {\n                                  const date = new Date(log.nextFollowUpDate);\n                                  return isNaN(date.getTime()) ? '-' : format(date, 'PP');\n                                } catch {\n                                  return '-';\n                                }\n                              })()\n                            : '-'}\n                        </TableCell>\n                        <TableCell>\n                          {(() => {\n                            try {\n                              const date = new Date(log.createdAt);\n                              return isNaN(date.getTime()) ? '-' : format(date, 'PP p');\n                            } catch {\n                              return '-';\n                            }\n                          })()}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            ) : (\n              <p className=\"text-center text-muted-foreground py-8\">No call logs yet</p>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold text-foreground\">Performance</h1>\n        <p className=\"text-muted-foreground mt-1\">Team performance overview - Click on a salesperson to view their call logs</p>\n      </div>\n\n      {salespersonPerformance && salespersonPerformance.length > 0 ? (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n          {salespersonPerformance.map((person) => (\n            <Card \n              key={person.id} \n              className=\"hover:shadow-md transition-shadow cursor-pointer\" \n              onClick={() => setSelectedSalesperson(person)}\n              data-testid={`card-salesperson-${person.id}`}\n            >\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"flex h-12 w-12 items-center justify-center rounded-full bg-primary text-primary-foreground font-bold\">\n                    {person.name.charAt(0)}\n                  </div>\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg\">{person.name}</CardTitle>\n                    <p className=\"text-sm text-muted-foreground\">{person.email}</p>\n                  </div>\n                  <Badge \n                    variant={person.conversionRate > 30 ? \"default\" : \"secondary\"}\n                    className={`${person.conversionRate > 30 ? \"bg-green-500\" : person.conversionRate > 15 ? \"bg-yellow-500\" : \"\"} text-sm`}\n                  >\n                    {person.conversionRate}%\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-1\">\n                    <div className=\"flex items-center gap-2 text-muted-foreground\">\n                      <Users className=\"h-4 w-4\" />\n                      <span className=\"text-xs\">Leads</span>\n                    </div>\n                    <p className=\"text-2xl font-bold\">{person.leadsAssigned}</p>\n                  </div>\n\n                  <div className=\"space-y-1\">\n                    <div className=\"flex items-center gap-2 text-muted-foreground\">\n                      <Award className=\"h-4 w-4\" />\n                      <span className=\"text-xs\">Conversions</span>\n                    </div>\n                    <p className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n                      {person.conversions}\n                    </p>\n                  </div>\n\n                  <div className=\"space-y-1\">\n                    <div className=\"flex items-center gap-2 text-muted-foreground\">\n                      <TrendingUp className=\"h-4 w-4\" />\n                      <span className=\"text-xs\">Interests</span>\n                    </div>\n                    <p className=\"text-2xl font-bold\">{person.buyerInterestsAdded}</p>\n                  </div>\n\n                  <div className=\"space-y-1\">\n                    <div className=\"flex items-center gap-2 text-muted-foreground\">\n                      <DollarSign className=\"h-4 w-4\" />\n                      <span className=\"text-xs\">Revenue</span>\n                    </div>\n                    <p className=\"text-2xl font-bold\">₹{(person.revenue / 100000).toFixed(1)}L</p>\n                  </div>\n                </div>\n                \n                <div className=\"mt-4 pt-4 border-t border-border\">\n                  <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                    <div className=\"flex items-center gap-2\">\n                      <Phone className=\"h-4 w-4\" />\n                      <span>View Call Logs</span>\n                    </div>\n                    <span>→</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12 text-center\">\n            <Users className=\"h-16 w-16 text-muted-foreground/50 mb-4\" />\n            <p className=\"text-lg font-medium text-foreground\">No performance data available</p>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              Data will appear here once salespersons start managing leads\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":9938}},"version":2}